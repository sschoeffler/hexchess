<?php
// utils/render.php - Force hexagonal rendering with inline styles

function renderBoard($game, $gameId = null, $canMove = false) {
    $html = '<div class="hex-board-container">';
    $html .= '<div class="hex-board">';
    
    $boardSize = $game->getBoardSize();
    
    // Generate hexagonal grid
    for ($r = -$boardSize; $r <= $boardSize; $r++) {
        $html .= '<div class="hex-row" data-row="' . $r . '">';
        
        $qMin = max(-$boardSize, -$r - $boardSize);
        $qMax = min($boardSize, -$r + $boardSize);
        
        for ($q = $qMin; $q <= $qMax; $q++) {
            $piece = $game->getPiece($q, $r);
            $colorClass = getCellColor($q, $r);
            
            // FORCE hexagon with inline styles!
            $hexStyle = 'clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%); ';
            $hexStyle .= 'width: 60px; height: 60px; position: relative; cursor: pointer; ';
            $hexStyle .= 'transition: all 0.2s ease; border: 2px solid #4a5568; ';
            
            // Add color styling
            switch ($colorClass) {
                case 'pastel-red':
                    $hexStyle .= 'background: #feb2b2; border-color: #fc8181; ';
                    break;
                case 'pastel-green':
                    $hexStyle .= 'background: #c6f6d5; border-color: #9ae6b4; ';
                    break;
                case 'pastel-blue':
                    $hexStyle .= 'background: #bee3f8; border-color: #90cdf4; ';
                    break;
                default:
                    $hexStyle .= 'background: #718096; border-color: #4a5568; ';
            }
            
            $html .= '<div class="hex-cell ' . $colorClass . '" ';
            $html .= 'style="' . $hexStyle . '" ';
            $html .= 'data-q="' . $q . '" data-r="' . $r . '" ';
            $html .= 'onclick="selectHex(' . $q . ', ' . $r . ')">';
            
            $html .= '<div class="hex-content" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); pointer-events: none;">';
            
            if ($piece) {
                $pieceClass = $piece->player === 0 ? 'red-piece' : 'blue-piece';
                $pieceSymbol = getPieceSymbol($piece->type);
                $pieceStyle = 'font-size: 36px; font-weight: bold; text-shadow: 2px 2px 4px rgba(0,0,0,0.7); user-select: none; ';
                $pieceStyle .= $piece->player === 0 ? 'color: #dc2626;' : 'color: #2563eb;';
                
                $html .= '<span class="piece ' . $pieceClass . '" style="' . $pieceStyle . '">' . $pieceSymbol . '</span>';
            }
            
            $html .= '</div>'; // hex-content
            $html .= '</div>'; // hex-cell
        }
        
        $html .= '</div>'; // hex-row
    }
    
    $html .= '</div>'; // hex-board
    $html .= '</div>'; // hex-board-container
    
    return $html;
}

function renderDemoBoard($game, $selectedPiece = 'king') {
    $html = '<div class="hex-board-container demo-board">';
    $html .= '<div class="hex-board">';
    
    $boardSize = 8; // Demo uses large board
    
    // Generate hexagonal grid
    for ($r = -$boardSize; $r <= $boardSize; $r++) {
        $html .= '<div class="hex-row" data-row="' . $r . '">';
        
        $qMin = max(-$boardSize, -$r - $boardSize);
        $qMax = min($boardSize, -$r + $boardSize);
        
        for ($q = $qMin; $q <= $qMax; $q++) {
            $colorClass = getCellColor($q, $r);
            
            // FORCE hexagon with inline styles for demo too!
            $hexStyle = 'clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%); ';
            $hexStyle .= 'width: 50px; height: 50px; position: relative; cursor: pointer; ';
            $hexStyle .= 'transition: all 0.2s ease; border: 2px solid #4a5568; ';
            
            // Add color styling
            switch ($colorClass) {
                case 'pastel-red':
                    $hexStyle .= 'background: #feb2b2; border-color: #fc8181; ';
                    break;
                case 'pastel-green':
                    $hexStyle .= 'background: #c6f6d5; border-color: #9ae6b4; ';
                    break;
                case 'pastel-blue':
                    $hexStyle .= 'background: #bee3f8; border-color: #90cdf4; ';
                    break;
                default:
                    $hexStyle .= 'background: #718096; border-color: #4a5568; ';
            }
            
            $html .= '<div class="hex-cell ' . $colorClass . '" ';
            $html .= 'style="' . $hexStyle . '" ';
            $html .= 'data-q="' . $q . '" data-r="' . $r . '">';
            
            $html .= '<div class="hex-content" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); pointer-events: none;">';
            // Pieces will be added by JavaScript
            $html .= '</div>'; // hex-content
            $html .= '</div>'; // hex-cell
        }
        
        $html .= '</div>'; // hex-row
    }
    
    $html .= '</div>'; // hex-board
    $html .= '</div>'; // hex-board-container
    
    return $html;
}

function createDemoBoard() {
    // Return a simple demo object
    return new stdClass();
}

function getCellColor($q, $r) {
    $colorIndex = ((($q - $r) % 3) + 3) % 3;
    $colors = ['pastel-red', 'pastel-green', 'pastel-blue'];
    return $colors[$colorIndex];
}

function getPieceSymbol($type) {
    $symbols = [
        'king' => '♚',
        'queen' => '♛', 
        'rook' => '♜',
        'bishop' => '♝',
        'knight' => '♞',
        'pawn' => '♟'
    ];
    return $symbols[$type] ?? '?';
}
?>