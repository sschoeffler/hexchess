<?php
// ------------------------------------------------------------
// index.php (full file)
// ------------------------------------------------------------

// Production-friendly error settings
ini_set('display_errors', 0);
error_reporting(E_ALL);
ini_set('log_errors', 1);

session_start();

// Guard against unserialize gadget
if (!class_exists('PoohGame')) {
    class PoohGame { public function __wakeup() {} }
}

// Includes
require_once 'config/database.php';
require_once 'classes/Piece.php';
require_once 'classes/User.php';
require_once 'classes/GameManager.php';
require_once 'classes/HexChess.php';
require_once 'classes/HexChessAI.php';
require_once 'utils/render.php';

// Core
$user        = new User($pdo);
$gameManager = new GameManager($pdo);

// ------------------------------
// Lightweight JSON API (GET)
// ------------------------------
if (isset($_GET['api'])) {
    header('Content-Type: application/json');

    switch ($_GET['api']) {
        case 'games':
            try {
                $stmt = $pdo->prepare("
                    SELECT 
                        g.game_id,
                        g.game_name,
                        g.status,
                        g.player_count,
                        g.game_mode,
                        g.ai_difficulty,
                        COUNT(gp.user_id) as current_players,
                        creator.username as creator,
                        GROUP_CONCAT(u.username SEPARATOR ', ') as player_names
                    FROM games g
                    LEFT JOIN game_players gp ON g.game_id = gp.game_id
                    LEFT JOIN users creator ON g.creator_id = creator.id
                    LEFT JOIN users u ON gp.user_id = u.id
                    WHERE g.status = 'waiting'
                      AND (g.game_type = 'chess' OR g.game_type = 'hexchess' OR g.game_type IS NULL)
                    GROUP BY g.game_id
                    ORDER BY g.created_at DESC
                    LIMIT 20
                ");
                $stmt->execute();
                $games = $stmt->fetchAll(PDO::FETCH_ASSOC);

                $result = array_map(function ($game) {
                    return [
                        'game_id'        => $game['game_id'],
                        'game_name'      => $game['game_name'] ?: 'Unnamed Game',
                        'status'         => $game['status'],
                        'player_count'   => (int)$game['player_count'],
                        'current_players'=> (int)$game['current_players'],
                        'creator'        => $game['creator'],
                        'player_names'   => $game['player_names'],
                        'game_mode'      => $game['game_mode'],
                        'ai_difficulty'  => $game['ai_difficulty']
                    ];
                }, $games);

                echo json_encode($result);
            } catch (Exception $e) {
                echo json_encode(['error' => 'Database error: ' . $e->getMessage()]);
            }
            exit;

        case 'my-games':
            if (!isset($_SESSION['user_id'])) {
                http_response_code(401);
                echo json_encode(['error' => 'Authentication required']);
                exit;
            }

            try {
                $stmt = $pdo->prepare("
                    SELECT 
                        g.game_id,
                        g.game_name,
                        g.status,
                        g.player_count,
                        g.game_mode,
                        g.ai_difficulty,
                        gp.player_slot,
                        w.username as winner_name,
                        GROUP_CONCAT(
                            CASE 
                                WHEN u.id = ? THEN CONCAT(u.username, ' (You)')
                                WHEN g.game_mode = 'ai' AND u.id != ? THEN 
                                    CASE g.ai_difficulty
                                        WHEN 'easy' THEN 'Easy AI'
                                        WHEN 'medium' THEN 'Medium AI'
                                        WHEN 'hard' THEN 'Hard AI'
                                        ELSE 'AI'
                                    END
                                ELSE u.username
                            END 
                            ORDER BY gp2.player_slot 
                            SEPARATOR ' vs '
                        ) as player_names
                    FROM games g
                    JOIN game_players gp  ON g.game_id = gp.game_id
                    JOIN game_players gp2 ON g.game_id = gp2.game_id
                    JOIN users u          ON gp2.user_id = u.id
                    LEFT JOIN users w     ON g.winner_id = w.id
                    WHERE gp.user_id = ?
                      AND g.status IN ('waiting','active','finished')
                      AND (g.game_type = 'chess' OR g.game_type = 'hexchess' OR g.game_type IS NULL)
                    GROUP BY g.game_id, gp.player_slot
                    ORDER BY g.created_at DESC
                    LIMIT 20
                ");
                $stmt->execute([$_SESSION['user_id'], $_SESSION['user_id'], $_SESSION['user_id']]);
                $games = $stmt->fetchAll(PDO::FETCH_ASSOC);

                $result = array_map(function ($game) {
                    return [
                        'game_id'      => $game['game_id'],
                        'game_name'    => $game['game_name'] ?: 'Unnamed Game',
                        'status'       => $game['status'],
                        'player_count' => (int)$game['player_count'],
                        'current_players' => (int)$game['player_count'],
                        'is_your_turn' => false,
                        'winner_name'  => $game['winner_name'],
                        'player_names' => $game['player_names'],
                        'game_mode'    => $game['game_mode'] ?? 'multiplayer'
                    ];
                }, $games);

                echo json_encode($result);
                exit;
            } catch (Exception $e) {
                echo json_encode(['error' => 'Database error', 'message' => $e->getMessage()]);
                exit;
            }

        default:
            echo json_encode(['error' => 'Unknown API endpoint']);
            exit;
    }
}

// --------------------------------------
// POST Actions (AJAX from the frontend)
// --------------------------------------
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
    header('Content-Type: application/json');

    try {
        switch ($_POST['action']) {

            // --- CREATE GAME (with verbose server logging; safe to keep) ---
            case 'create_game':
                error_log("=== CREATE GAME DEBUG START ===");
                error_log("POST data: " . print_r($_POST, true));

                if (!isset($_SESSION['user_id'])) {
                    error_log("Error: User not logged in");
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }

                $roomName    = trim($_POST['room_name'] ?? $_POST['game_name'] ?? '');
                $gameType    = trim($_POST['game_type'] ?? 'online');
                $playerCount = (int)($_POST['player_count'] ?? 2);
                $boardSize   = (int)($_POST['board_size'] ?? 7);
                $turnTimer   = (int)($_POST['turn_timer'] ?? 30);
                $skipAction  = trim($_POST['skip_action'] ?? 'skip_turn');

                error_log("Parsed data - Room: $roomName, Type: $gameType, Players: $playerCount, Board: $boardSize");

                $boardLimits = [
    5 => ['min' => 2, 'max' => 3], // Small
    6 => ['min' => 2, 'max' => 4], // Medium
    7 => ['min' => 2, 'max' => 6], // Large (bumped to 6)
    8 => ['min' => 2, 'max' => 6]  // Jumbo
];

                if (!isset($boardLimits[$boardSize])) {
                    $msg = "Invalid board size: $boardSize";
                    error_log("Error: $msg");
                    echo json_encode(['success' => false, 'error' => $msg]);
                    exit;
                }
                $limits = $boardLimits[$boardSize];
                if ($playerCount > $limits['max']) {
                    $msg = "Board size $boardSize supports maximum {$limits['max']} players. Requested: $playerCount";
                    error_log("Error: $msg");
                    echo json_encode(['success' => false, 'error' => $msg]);
                    exit;
                }
                if ($playerCount < $limits['min']) {
                    $msg = "Minimum {$limits['min']} players required. Requested: $playerCount";
                    error_log("Error: $msg");
                    echo json_encode(['success' => false, 'error' => $msg]);
                    exit;
                }

                // Map new game_type -> legacy game_mode used elsewhere
                $gameMode = $_POST['game_mode'] ?? ([
                    'vs_ai'  => 'ai',
                    'hotseat'=> 'hotseat',
                    'online' => 'multiplayer'
                ][$gameType] ?? 'multiplayer');

                $aiDifficulty = trim($_POST['ai_difficulty'] ?? 'medium');

                error_log("Mapped game mode: $gameMode, AI difficulty: $aiDifficulty");

                if (empty($roomName)) {
                    error_log("Error: Room name is empty");
                    echo json_encode(['success' => false, 'error' => 'Room name is required']);
                    exit;
                }

                // For AI games, force 2 players
                if ($gameMode === 'ai') {
                    $playerCount = 2;
                    $gameType    = 'vs_ai';
                    error_log("AI game detected, forcing 2 players");
                }

                try {
                    $startingPositions = calculateStartingPositions($playerCount);
                    error_log("Starting positions: " . json_encode($startingPositions));

                    if (!method_exists($gameManager, 'createGame')) {
                        error_log("Error: GameManager::createGame method does not exist");
                        echo json_encode(['success' => false, 'error' => 'GameManager method missing']);
                        exit;
                    }

                    $reflection = new ReflectionMethod($gameManager, 'createGame');
                    $paramCount = $reflection->getNumberOfParameters();
                    error_log("createGame method expects $paramCount parameters");

                    if ($paramCount >= 9) {
                        $gameId = $gameManager->createGame(
                            $_SESSION['user_id'],
                            $roomName,
                            $playerCount,
                            $boardSize,
                            $gameMode,
                            $aiDifficulty,
                            $gameType,
                            $turnTimer,
                            $skipAction,
                            $startingPositions
                        );
                    } else {
                        error_log("Using legacy createGame method");
                        $gameId = $gameManager->createGame(
                            $_SESSION['user_id'],
                            $roomName,
                            $playerCount,
                            $boardSize,
                            $gameMode,
                            $aiDifficulty
                        );
                    }

                    error_log("createGame returned: " . ($gameId ? $gameId : 'false'));

                    if ($gameId) {
                        error_log("SUCCESS: Game created with ID: $gameId");
                        echo json_encode([
                            'success'      => true,
                            'game_id'      => $gameId,
                            'game_type'    => $gameType,
                            'player_count' => $playerCount
                        ]);
                    } else {
                        error_log("ERROR: createGame returned false");
                        echo json_encode(['success' => false, 'error' => 'Failed to create game in database']);
                    }
                } catch (Exception $e) {
                    $errorMsg = "Enhanced game creation error: " . $e->getMessage();
                    error_log($errorMsg);
                    error_log("Stack trace: " . $e->getTraceAsString());
                    echo json_encode(['success' => false, 'error' => 'Server error: ' . $e->getMessage()]);
                }

                error_log("=== CREATE GAME DEBUG END ===");
                exit;

            case 'join_game':
                if (!isset($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }
                $gameId = trim($_POST['game_id'] ?? '');
                if ($gameId === '') {
                    echo json_encode(['success' => false, 'error' => 'Game ID is required']);
                    exit;
                }
                $result = $gameManager->joinGame($gameId, $_SESSION['user_id']);
                echo json_encode($result === true ? ['success' => true] : ['success' => false, 'error' => $result ?: 'Failed to join game']);
                exit;

            case 'resign':
                if (!isset($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }
                $gameId = trim($_POST['game_id'] ?? '');
                if ($gameId === '') {
                    echo json_encode(['success' => false, 'error' => 'Game ID required']);
                    exit;
                }
                $gameInfo = $gameManager->getGame($gameId);
                if (!$gameInfo) {
                    echo json_encode(['success' => false, 'error' => 'Game not found']);
                    exit;
                }
                $game     = $gameInfo['game'];
                $gameData = $gameInfo['data'];

                if ($gameData['status'] !== 'active') {
                    echo json_encode(['success' => false, 'error' => 'Game is not active']);
                    exit;
                }

                $userPlayerSlot = null;
                foreach ($gameInfo['players'] as $player) {
                    if ($player['user_id'] == $_SESSION['user_id']) {
                        $userPlayerSlot = $player['player_slot'];
                        break;
                    }
                }
                if ($userPlayerSlot === null) {
                    echo json_encode(['success' => false, 'error' => 'You are not in this game']);
                    exit;
                }

                $result = $game->resignPlayer($userPlayerSlot);

                if ($result === true) {
                    $gameManager->updateGameState($gameId, $game);
                    $gameState = $game->getGameState();
                    if ($gameState['gameStatus']['gameOver']) {
                        $winnerId = $gameState['gameStatus']['winner'];
                        $gameManager->finishGame($gameId, $winnerId);

                        $userObj = new User($pdo);
                        $userObj->updateStats($_SESSION['user_id'], false);
                        if ($winnerId) {
                            $userObj->updateStats($winnerId, true);
                        }
                    }
                    echo json_encode(['success' => true, 'message' => 'You have resigned from the game']);
                } else {
                    echo json_encode(['success' => false, 'error' => $result ?: 'Failed to resign']);
                }
                exit;

            case 'login':
                $username = trim($_POST['username'] ?? '');
                $password = $_POST['password'] ?? '';
                if ($username === '' || $password === '') {
                    echo json_encode(['success' => false, 'error' => 'Username and password required']);
                    exit;
                }
                $userId = $user->login($username, $password);
                if ($userId) {
                    $_SESSION['user_id'] = $userId;
                    echo json_encode(['success' => true]);
                } else {
                    echo json_encode(['success' => false, 'error' => 'Invalid credentials']);
                }
                exit;

            case 'register':
                $username = trim($_POST['username'] ?? '');
                $password = $_POST['password'] ?? '';
                $email    = trim($_POST['email'] ?? '');
                if ($username === '' || $password === '') {
                    echo json_encode(['success' => false, 'error' => 'Username and password required']);
                    exit;
                }
                if (strlen($username) < 3) {
                    echo json_encode(['success' => false, 'error' => 'Username must be at least 3 characters']);
                    exit;
                }
                if (strlen($password) < 6) {
                    echo json_encode(['success' => false, 'error' => 'Password must be at least 6 characters']);
                    exit;
                }
                $userId = $user->register($username, $password, $email);
                if ($userId) {
                    $_SESSION['user_id'] = $userId;
                    echo json_encode(['success' => true]);
                } else {
                    echo json_encode(['success' => false, 'error' => 'Registration failed - username may be taken']);
                }
                exit;

            case 'logout':
                session_destroy();
                echo json_encode(['success' => true]);
                exit;

            case 'getValidMoves':
                if (!isset($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }
                $gameId = trim($_POST['game_id'] ?? '');
                $fromQ  = (int)($_POST['fromQ'] ?? 0);
                $fromR  = (int)($_POST['fromR'] ?? 0);
                if ($gameId === '') {
                    echo json_encode(['success' => false, 'error' => 'Game ID required']);
                    exit;
                }
                $gameInfo = $gameManager->getGame($gameId);
                if (!$gameInfo) {
                    echo json_encode(['success' => false, 'error' => 'Game not found']);
                    exit;
                }
                $game     = $gameInfo['game'];
                $gameData = $gameInfo['data'];
                $isHotseat = (isset($gameData['game_mode']) && $gameData['game_mode'] === 'hotseat');

                // Gate by user turn only when NOT hotseat
                if (!$isHotseat && !$game->canUserMove($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not your turn']);
                    exit;
                }

                $validMoves = $game->getValidMoves($fromQ, $fromR);
                echo json_encode(['success' => true, 'validMoves' => $validMoves]);
                exit;

            case 'move':
                if (!isset($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }
                $gameId = trim($_POST['game_id'] ?? '');
                $fromQ  = (int)($_POST['fromQ'] ?? 0);
                $fromR  = (int)($_POST['fromR'] ?? 0);
                $toQ    = (int)($_POST['toQ'] ?? 0);
                $toR    = (int)($_POST['toR'] ?? 0);
                if ($gameId === '') {
                    echo json_encode(['success' => false, 'error' => 'Game ID required']);
                    exit;
                }
                $gameInfo = $gameManager->getGame($gameId);
                if (!$gameInfo) {
                    echo json_encode(['success' => false, 'error' => 'Game not found']);
                    exit;
                }
                $game      = $gameInfo['game'];
                $gameData  = $gameInfo['data'];
                $isHotseat = (isset($gameData['game_mode']) && $gameData['game_mode'] === 'hotseat');

                // Enforce per-user turn only for non-hotseat
                if (!$isHotseat && !$game->canUserMove($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not your turn']);
                    exit;
                }

                try {
                    $result = $game->movePiece($fromQ, $fromR, $toQ, $toR);
                    if ($result === true) {
                        if (method_exists($gameManager, 'updateGameState')) {
                            $gameManager->updateGameState($gameId, $game);
                        } elseif (method_exists($gameManager, 'saveGame')) {
                            $gameManager->saveGame($gameId, $game);
                        }

                        $gameState = $game->getGameState();
                        echo json_encode([
                            'success'      => true,
                            'gameState'    => $gameState,
                            'kingsInCheck' => $gameState['kingsInCheck'] ?? []
                        ]);
                    } else {
                        $errorMessage = is_string($result) ? $result : 'Invalid move';
                        $errorType = null;
                        if (strpos($errorMessage, 'expose') !== false || strpos($errorMessage, 'check') !== false) {
                            $errorType = 'exposes-king';
                        } elseif (strpos($errorMessage, 'piece') !== false) {
                            $errorType = 'wrong-player';
                        } elseif (strpos($errorMessage, 'no piece') !== false) {
                            $errorType = 'no-piece';
                        }
                        echo json_encode(['success' => false, 'error' => $errorMessage, 'errorType' => $errorType]);
                    }
                } catch (Exception $e) {
                    echo json_encode(['success' => false, 'error' => 'Move failed: ' . $e->getMessage()]);
                }
                exit;

            case 'ai_move':
                if (!isset($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }
                $gameId = trim($_POST['game_id'] ?? '');
                if ($gameId === '') {
                    echo json_encode(['success' => false, 'error' => 'Game ID required']);
                    exit;
                }
                try {
                    $gameInfo = $gameManager->getGame($gameId);
                    if (!$gameInfo) {
                        echo json_encode(['success' => false, 'error' => 'Game not found']);
                        exit;
                    }
                    $game     = $gameInfo['game'];
                    $gameData = $gameInfo['data'];
                    $players  = $gameInfo['players'];

                    $gameMode = $gameData['game_mode'] ?? '';
                    if ($gameMode !== 'ai') {
                        echo json_encode(['success' => false, 'error' => 'Not an AI game']);
                        exit;
                    }

                    $aiPlayerSlot = null;
                    foreach ($players as $player) {
                        if ($player['user_id'] != $_SESSION['user_id']) {
                            $aiPlayerSlot = $player['player_slot']; break;
                        }
                    }
                    if ($aiPlayerSlot === null) {
                        $userPlayerSlot = null;
                        foreach ($players as $player) {
                            if ($player['user_id'] == $_SESSION['user_id']) {
                                $userPlayerSlot = $player['player_slot']; break;
                            }
                        }
                        $aiPlayerSlot = ($userPlayerSlot == 0) ? 1 : 0;
                    }

                    $currentPlayerSlot = $game->getCurrentPlayerSlot();
                    if ($currentPlayerSlot !== $aiPlayerSlot) {
                        echo json_encode(['success' => false, 'error' => 'Not AI turn']);
                        exit;
                    }

                    $aiDifficulty = $gameData['ai_difficulty'] ?? 'medium';
                    $ai = new HexChessAI($game, $aiDifficulty, $aiPlayerSlot);
                    $result = $ai->makeMove();

                    if ($result === true) {
                        $gameManager->updateGameState($gameId, $game);
                        $gameState = $game->getGameState();
                        echo json_encode([
                            'success'          => true,
                            'gameState'        => $gameState,
                            'kingsInCheck'     => $gameState['kingsInCheck'] ?? [],
                            'aiName'           => method_exists($ai, 'getAIName') ? $ai->getAIName() : 'AI',
                            'newCurrentPlayer' => $game->getCurrentPlayerSlot()
                        ]);
                    } else {
                        echo json_encode(['success' => false, 'error' => 'AI move failed', 'result' => $result]);
                    }
                } catch (Exception $e) {
                    echo json_encode(['success' => false, 'error' => 'AI error: ' . $e->getMessage()]);
                }
                exit;

            default:
                echo json_encode(['success' => false, 'error' => 'Unknown action']);
                exit;
        }
    } catch (Exception $e) {
        error_log("AJAX Error: " . $e->getMessage());
        echo json_encode(['success' => false, 'error' => 'Server error occurred']);
        exit;
    }
}

// Helpers
function calculateStartingPositions($playerCount) {
    switch ($playerCount) {
        case 2: return [0, 3];
        case 3: return [0, 2, 4];
        case 4: return [0, 1, 3, 4];
        case 5: return [0, 1, 2, 3, 4];
        case 6: return [0, 1, 2, 3, 4, 5];
        default: return [0, 3];
    }
}

$isLoggedIn  = isset($_SESSION['user_id']);
$currentUser = $isLoggedIn ? $user->getUserById($_SESSION['user_id']) : null;
$page        = $_GET['page'] ?? 'lobby';
?>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>HexChess Online</title>
  <link rel="stylesheet" href="assets/styles.css?v=2.1">
</head>
<body>
  <div class="header">
    <h1>🏰 HexChess Online</h1>
    <div class="user-info">
      <?php if ($isLoggedIn): ?>
        <span>Welcome, <?php echo htmlspecialchars($currentUser['username']); ?>!</span>
        <span>(<?php echo $currentUser['wins']; ?>W-<?php echo $currentUser['losses']; ?>L)</span>
        <button class="btn btn-secondary" onclick="logout()">Logout</button>
      <?php else: ?>
        <button class="btn btn-secondary" onclick="window.location.href='?page=demo'">📚 Demo</button>
        <button class="btn" onclick="showAuth('login')">Login</button>
        <button class="btn btn-secondary" onclick="showAuth('register')">Register</button>
      <?php endif; ?>
    </div>
  </div>

  <?php if (!$isLoggedIn && $page !== 'demo'): ?>
    <!-- Auth forms -->
    <div class="auth-container" id="loginForm" style="display:none;">
      <h2>Login</h2>
      <form onsubmit="login(event)">
        <div class="form-group">
          <label>Username:</label>
          <input type="text" name="username" required>
        </div>
        <div class="form-group">
          <label>Password:</label>
          <input type="password" name="password" required>
        </div>
        <button type="submit" class="btn" style="width:100%;">Login</button>
      </form>
      <p style="text-align:center;margin-top:1rem;">
        <a href="#" onclick="showAuth('register')" style="color:#fff;">Need an account? Register</a>
      </p>
      <p style="text-align:center;margin-top:0.5rem;">
        <a href="?page=demo" style="color:#2ecc71;">📚 Try the Piece Movement Demo</a>
      </p>
    </div>

    <div class="auth-container" id="registerForm" style="display:none;">
      <h2>Register</h2>
      <form onsubmit="register(event)">
        <div class="form-group">
          <label>Username (3+ characters):</label>
          <input type="text" name="username" minlength="3" required>
        </div>
        <div class="form-group">
          <label>Password (6+ characters):</label>
          <input type="password" name="password" minlength="6" required>
        </div>
        <div class="form-group">
          <label>Email (optional):</label>
          <input type="email" name="email">
        </div>
        <button type="submit" class="btn" style="width:100%;">Register</button>
      </form>
      <p style="text-align:center;margin-top:1rem;">
        <a href="#" onclick="showAuth('login')" style="color:#fff;">Have an account? Login</a>
      </p>
      <p style="text-align:center;margin-top:0.5rem;">
        <a href="?page=demo" style="color:#2ecc71;">📚 Try the Piece Movement Demo</a>
      </p>
    </div>

  <?php elseif ($page === 'lobby'): ?>
    <!-- Lobby -->
    <div class="container">
      <div class="lobby">

        <div class="panel">
          <h2>🎮 Create New Game</h2>
          <form onsubmit="createEnhancedGame(event)">
            <div class="form-group">
              <label>Game Type:</label>
              <select name="game_type" id="game_type" onchange="updateEnhancedGameModeOptions()">
                <option value="online">👥 Online Multiplayer</option>
                <option value="vs_ai">🤖 vs AI</option>
                <option value="hotseat">🏠 Local Hotseat</option>
              </select>
            </div>

            <div class="form-group" id="players-group">
              <label>Players:</label>
              <select name="player_count" id="player_count" onchange="updateEnhancedDefaultGameName()">
                <option value="2">2 Players</option>
                <option value="3">3 Players</option>
                <option value="4">4 Players</option>
                <option value="5">5 Players</option>
                <option value="6">6 Players</option>
              </select>
            </div>

            <div class="form-group" id="ai-difficulty-group" style="display:none;">
              <label>AI Difficulty:</label>
              <select name="ai_difficulty" id="ai_difficulty" onchange="updateEnhancedDefaultGameName()">
                <option value="easy">🟢 Easy (Rookie)</option>
                <option value="medium" selected>🟡 Medium (Knight)</option>
                <option value="hard">🔴 Hard (Master)</option>
              </select>
            </div>

            <div class="form-group">
              <label>Board Size:</label>
              <select name="board_size" id="board_size" onchange="updateEnhancedDefaultGameName()">
                <option value="5">Small Board</option>
                <option value="6">Medium Board</option>
                <option value="7" selected>Large Board</option>
                <option value="8">Jumbo Board</option>
              </select>
            </div>

            <div id="timer-settings" class="timer-settings" style="display:none;">
              <div class="timer-info"><strong>⏱️ Turn Timer (for 4-6 player games)</strong></div>
              <div class="form-row" style="display:grid;grid-template-columns:1fr 1fr;gap:10px;">
                <div class="form-group">
                  <label>Turn Time Limit:</label>
                  <select name="turn_timer">
                    <option value="30">30 seconds</option>
                    <option value="60">1 minute</option>
                    <option value="120">2 minutes</option>
                    <option value="300">5 minutes</option>
                  </select>
                </div>
                <div class="form-group">
                  <label>When Timer Expires:</label>
                  <select name="skip_action">
                    <option value="skip_turn">Skip Turn</option>
                    <option value="eliminate">Eliminate Player</option>
                  </select>
                </div>
              </div>
            </div>

            <div class="form-group">
              <label>Game Name:</label>
              <input type="text" name="room_name" id="game_name"
                     placeholder="Enter custom name or use default"
                     value="2-Player Large Game" maxlength="100">
              <div class="form-helper">
                <small>Customize your room name</small>
                <button type="button" class="btn-reset" onclick="resetToEnhancedDefaultName()">Reset to Default</button>
              </div>
            </div>

            <button type="submit" class="btn" style="width:100%;">Create Game</button>
          </form>

          <div style="margin-top:1rem;padding-top:1rem;border-top:1px solid rgba(255,255,255,0.2);">
            <button class="btn btn-secondary" onclick="window.location.href='?page=demo'" style="width:100%;">📚 Learn Piece Movements</button>
          </div>
        </div>

        <div class="panel">
          <h2>🎯 Your Active Games</h2>
          <div class="game-list" id="my-games"><p>Loading your games...</p></div>
          <button class="btn btn-secondary" onclick="loadMyGames()" style="width:100%;margin-top:1rem;">Refresh My Games</button>
        </div>

      </div>

      <div class="lobby" style="margin-top:2rem;">
        <div class="panel" style="grid-column:1 / -1;">
          <h2>🌐 Available Games</h2>
          <div class="game-list" id="available-games"><p>Loading games...</p></div>
          <button class="btn btn-secondary" onclick="loadAvailableGames()" style="width:100%;margin-top:1rem;">Refresh</button>
        </div>
      </div>
    </div>

  <?php elseif ($page === 'demo'): ?>
    <!-- Piece Movement Demo -->
    <div class="game-area">
      <div class="game-sidebar">
        <div class="game-status">
          <h3>📚 Piece Movement Demo</h3>
          <p>Select a piece type to see how it moves!</p>
        </div>

        <div class="player-list">
          <h3 style="margin-bottom:20px;">Choose Piece Type</h3>
          <div style="display:grid;grid-template-columns:1fr 1fr;gap:8px;margin-bottom:15px;">
            <button class="piece-nav-btn active" onclick="showPiece('king')"   id="nav-king">   ♚ King</button>
            <button class="piece-nav-btn"         onclick="showPiece('queen')"  id="nav-queen">  ♛ Queen</button>
            <button class="piece-nav-btn"         onclick="showPiece('rook')"   id="nav-rook">   ♜ Rook</button>
            <button class="piece-nav-btn"         onclick="showPiece('bishop')" id="nav-bishop"> ♝ Bishop</button>
            <button class="piece-nav-btn"         onclick="showPiece('knight')" id="nav-knight"> ♞ Knight</button>
            <button class="piece-nav-btn"         onclick="showPiece('pawn')"   id="nav-pawn">   ♟ Pawn</button>
          </div>

          <div id="piece-description">
            <div id="desc-king" class="piece-desc active"><h4>♚ King Movement</h4><p>Moves one space in any direction (12 hex neighbors).</p></div>
            <div id="desc-queen" class="piece-desc"><h4>♛ Queen Movement</h4><p>Combines rook + bishop movement on hexes.</p></div>
            <div id="desc-rook"  class="piece-desc"><h4>♜ Rook Movement</h4><p>Any distance along three orthogonal axes.</p></div>
            <div id="desc-bishop"class="piece-desc"><h4>♝ Bishop Movement</h4><p>Any distance along the three diagonals.</p></div>
            <div id="desc-knight"class="piece-desc"><h4>♞ Knight Movement</h4><p>Jumps in hex “L”-shapes.</p></div>
            <div id="desc-pawn"  class="piece-desc"><h4>♟ Pawn Movement</h4><p>Forward one; capture forward diagonals.</p></div>
          </div>
        </div>

        <?php if ($isLoggedIn): ?>
          <div style="display:flex;gap:10px;flex-direction:column;">
            <button class="btn btn-secondary" onclick="window.location.href='?page=lobby'">Back to Lobby</button>
          </div>
        <?php else: ?>
          <button class="btn btn-secondary" onclick="window.location.href='?'">← Back to Login</button>
        <?php endif; ?>
      </div>

      <div class="game-main">
        <?php $demoGame = createDemoBoard(); echo renderDemoBoard($demoGame, 'king'); ?>
      </div>
    </div>

  <?php elseif ($page === 'game'): ?>
    <?php
      $gameId   = $_GET['id'] ?? '';
      $gameInfo = $gameManager->getGame($gameId);
      if (!$gameInfo):
    ?>


<div class="container">
        <div class="panel">
          <h2>Game Not Found</h2>
          <p>The requested game could not be found.</p>
          <button class="btn" onclick="window.location.href='?page=lobby'">Back to Lobby</button>
        </div>
      </div>
    <?php else:
        $game      = $gameInfo['game'];
        $players   = $gameInfo['players'];
        $gameData  = $gameInfo['data'];
        $gameState = $game->getGameState();

        $userPlayerSlot = null;
        foreach ($players as $p) {
            if ($p['user_id'] == $_SESSION['user_id']) { $userPlayerSlot = $p['player_slot']; break; }
        }

        $canMove    = $userPlayerSlot !== null && $game->canUserMove($_SESSION['user_id']);
        $gameActive = ($gameData['status'] === 'active');
        $userInGame = ($userPlayerSlot !== null);

        // Precompute (so we can put them in data-attributes cleanly)
        $gameMode          = $gameData['game_mode'] ?? 'multiplayer';
        $isAIGame          = ($gameMode === 'ai');
        $currentPlayerSlot = method_exists($game, 'getCurrentPlayerSlot') ? $game->getCurrentPlayerSlot() : 0;

        $aiPlayerSlot = null;
        if ($isAIGame) {
            foreach ($players as $pl) {
                if ($pl['user_id'] != $_SESSION['user_id']) { $aiPlayerSlot = $pl['player_slot']; break; }
            }
            if ($aiPlayerSlot === null) { $aiPlayerSlot = ($userPlayerSlot == 0) ? 1 : 0; }
        }
    ?>

          <script>
// --- Globals used by assets/game.js ---
var gameId = <?php echo json_encode($gameId); ?>;

// game mode from server (multiplayer | ai | hotseat)
var gameMode = <?php echo json_encode($gameData['game_mode'] ?? 'multiplayer'); ?>;

// whose turn gating (in hotseat we allow clicks from this device)
var userCanMove = (gameMode === 'hotseat')
  ? true
  : <?php echo $canMove ? 'true' : 'false'; ?>;

// optional helpful context (not required, but fine to keep)
var currentPlayerSlot = <?php echo json_encode(method_exists($game, 'getCurrentPlayerSlot') ? $game->getCurrentPlayerSlot() : null); ?>;
var userPlayerSlot     = <?php echo json_encode($userPlayerSlot); ?>;
var isAIGame           = (gameMode === 'ai');
var aiPlayerSlot       = <?php
  $aiSlot = null;
  if (($gameData['game_mode'] ?? '') === 'ai') {
      foreach ($players as $p) { if ($p['user_id'] != $_SESSION['user_id']) { $aiSlot = $p['player_slot']; break; } }
      if ($aiSlot === null) { $aiSlot = ($userPlayerSlot == 0) ? 1 : 0; }
  }
  echo json_encode($aiSlot);
?>;
</script>

    <div class="game-area">
      <div class="game-sidebar">
        <div class="game-status">
          <h3 id="gameStatus">
            <?php
              if ($gameState['gameStatus']['gameOver']) {
                  echo "Game Over";
              } elseif ($gameData['status'] === 'waiting') {
                  echo "Waiting for Players";
              } else {
                  echo "Game Active";
              }
            ?>
          </h3>
          <p id="gameStatusText">
            <?php
              if ($gameState['gameStatus']['gameOver']) {
                  if (isset($gameState['gameStatus']['winner'])) {
                      $winnerName = "Unknown";
                      foreach ($players as $pl) if ($pl['user_id'] == $gameState['gameStatus']['winner']) { $winnerName = $pl['username']; break; }
                      echo "Winner: " . htmlspecialchars($winnerName);
                  } else {
                      $reason = $gameState['gameStatus']['reason'] ?? 'draw';
                      $msg = ($reason === 'stalemate') ? '🤝 STALEMATE - No legal moves available' : '🤝 DRAW - Game ended in a tie';
                      echo '<div style="font-size:20px;font-weight:bold;color:#f39c12;">' . $msg . '</div>';
                  }
              } elseif ($gameData['status'] === 'waiting') {
                  echo "Need " . ($game->getPlayerCount() - count($players)) . " more player(s)";
              } elseif ($canMove) {
                  echo "Your turn!";
              } else {
                  echo "Waiting for " . ucfirst($game->getCurrentPlayer()) . " player";
              }
            ?>
          </p>

          <?php if ($gameState['isInCheck']): ?>
            <div class="check-warning"><strong>⚠️ Your King is in Check!</strong></div>
          <?php endif; ?>
        </div>

        <div class="player-list">
          <h3>Players</h3>
          <div id="playerList">
          <?php foreach ($players as $pl): ?>
            <div class="player-item <?php echo $pl['player_slot'] == $game->getCurrentPlayerSlot() ? 'current' : ''; ?>">
              <strong><?php echo ucfirst($game->getPlayers()[$pl['player_slot']]); ?></strong><br>
              <?php if ($pl['user_id'] == $_SESSION['user_id']): ?>
                <?php echo htmlspecialchars($pl['username']); ?> <small>(You)</small>
              <?php elseif ($gameData['game_mode'] === 'ai'): ?>
                <?php
                  $aiDifficulty = $gameData['ai_difficulty'] ?? 'medium';
                  $difficultyColors = ['easy'=>'#2ecc71','medium'=>'#f39c12','hard'=>'#e74c3c'];
                  $difficultyNames  = ['easy'=>'🟢 Easy AI','medium'=>'🟡 Medium AI','hard'=>'🔴 Hard AI'];
                ?>
                <span style="color:<?php echo $difficultyColors[$aiDifficulty]; ?>;font-weight:bold;">
                  <?php echo $difficultyNames[$aiDifficulty]; ?>
                </span>
              <?php else: ?>
                <?php echo htmlspecialchars($pl['username']); ?>
              <?php endif; ?>
            </div>
          <?php endforeach; ?>
          </div>
        </div>

        <div class="game-controls">
          <button class="btn btn-secondary" onclick="window.open('?page=demo','_blank')" style="width:100%;margin-bottom:10px;">📚 Piece Movements</button>
          <?php if ($gameActive && $userInGame && !$gameState['gameStatus']['gameOver']): ?>
            <button class="btn btn-danger" onclick="resignGame()" style="width:100%;margin-bottom:10px;">🏳️ Resign Game</button>
          <?php endif; ?>
          <button class="btn btn-secondary" onclick="window.location.href='?page=lobby'" style="width:100%;">Back to Lobby</button>
        </div>
      </div>

      <!-- Data root for client JS -->
      <div id="hexchess-root"
           data-game-id="<?php echo htmlspecialchars($gameId); ?>"
           data-user-can-move="<?php echo $canMove ? '1' : '0'; ?>"
           data-game-mode="<?php echo htmlspecialchars($gameMode); ?>"
           data-current-player-slot="<?php echo (int)$currentPlayerSlot; ?>"
           data-user-player-slot="<?php echo (int)($userPlayerSlot ?? -1); ?>"
           data-ai-player-slot="<?php echo ($aiPlayerSlot === null ? '' : (int)$aiPlayerSlot); ?>">
      </div>

<script>
(function () {
  var root = document.getElementById('hexchess-root');
  if (!root) return;

  // 1) Publish globals for game.js
  window.gameId = root.dataset.gameId || null;
  window.gameMode = root.dataset.gameMode || 'multiplayer';
  window.isAIGame = (window.gameMode === 'ai');

  var cps = root.dataset.currentPlayerSlot;
  var ups = root.dataset.userPlayerSlot;
  var ais = root.dataset.aiPlayerSlot;

  window.currentPlayerSlot = cps !== '' ? parseInt(cps, 10) : null;
  window.userPlayerSlot    = ups !== '' ? parseInt(ups, 10) : null;
  window.aiPlayerSlot      = ais === '' ? null : parseInt(ais, 10);

  // Seed from server flag (if present) then normalize for AI games
  window.userCanMove = (root.dataset.userCanMove === '1');

  // 2) Normalize turn ownership for AI mode using slots, not just the server hint
  if (window.isAIGame) {
    if (window.currentPlayerSlot === window.userPlayerSlot) {
      window.userCanMove = true;
    } else {
      window.userCanMove = false;

      // 3) If it's AI's turn, kick the AI immediately
      if (window.currentPlayerSlot === window.aiPlayerSlot && window.gameId) {
        setTimeout(function () {
          fetch(window.location.href, {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: 'action=ai_move&game_id=' + encodeURIComponent(window.gameId)
          })
          .then(r => r.json())
          .then(d => {
            if (d && d.success) {
              location.reload();
            } else if (d && d.error) {
              console.warn('AI move refused:', d.error);
            }
          })
          .catch(err => console.warn('AI move error:', err));
        }, 200);
      }
    }
  }
})();
</script>

      <!-- Actual board -->
      <div class="game-main">
        <?php echo renderBoard($game, $gameId, $canMove); ?>
      </div>
    </div>

<script>
  // ==== GAME GLOBALS (added) ====
  var gameId = <?php echo json_encode($gameId); ?>;
  var gameMode = <?php echo json_encode($gameData['game_mode'] ?? 'multiplayer'); ?>;
  var isAIGame = (gameMode === 'ai');
  var currentPlayerSlot = <?php
    $currentPlayerSlot = method_exists($game, 'getCurrentPlayerSlot') ? $game->getCurrentPlayerSlot() : null;
    echo json_encode($currentPlayerSlot);
  ?>;
  var userPlayerSlot = <?php echo json_encode($userPlayerSlot); ?>;

  // Find AI slot if needed
  <?php
    $aiPlayerSlot = null;
    if (($gameData['game_mode'] ?? '') === 'ai') {
        foreach ($players as $p) {
            if ($p['user_id'] != $_SESSION['user_id']) { $aiPlayerSlot = $p['player_slot']; break; }
        }
        if ($aiPlayerSlot === null) { $aiPlayerSlot = ($userPlayerSlot == 0) ? 1 : 0; }
    }
  ?>
  var aiPlayerSlot = <?php echo json_encode($aiPlayerSlot); ?>;

  var userCanMove = <?php echo $canMove ? 'true' : 'false'; ?>;
  if (gameMode === 'hotseat') { userCanMove = true; }
</script>

//AI Trigger
<script>
/** Auto-trigger AI turn (fixed: no sessionStorage, so it works every turn) */
(function () {
  if (typeof isAIGame === 'undefined' || !isAIGame) return;

  // Per-page-load guard only
  let aiTriggeredThisLoad = false;

  function triggerAIOnce() {
    if (aiTriggeredThisLoad) return;
    if (!gameId) return;
    if (typeof currentPlayerSlot === 'undefined' || typeof aiPlayerSlot === 'undefined') return;
    if (currentPlayerSlot !== aiPlayerSlot) return; // Not AI's turn

    aiTriggeredThisLoad = true;

    fetch(window.location.href, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: "action=ai_move&game_id=" + encodeURIComponent(gameId)
    })
    .then(r => r.json())
    .then(d => {
      if (d && d.success) {
        // AI moved; reload to show the new state
        location.reload();
      } else {
        console.warn("AI move declined:", (d && d.error) || d);
        // Allow another attempt this load (e.g., transient “Not AI turn”)
        aiTriggeredThisLoad = false;
      }
    })
    .catch(err => {
      console.error("AI move error:", err);
      aiTriggeredThisLoad = false;
    });
  }

  document.addEventListener("DOMContentLoaded", triggerAIOnce);
  // If the page was restored from bfcache, try again
  window.addEventListener("pageshow", function (e) {
    if (e.persisted) triggerAIOnce();
  });
})();
</script>


    <?php if (!empty($gameState['kingsInCheck'])): ?>
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        <?php foreach ($gameState['kingsInCheck'] as $king): ?>
        var cell = document.querySelector('[data-q="<?php echo $king['q']; ?>"][data-r="<?php echo $king['r']; ?>"]');
        if (cell) cell.classList.add('king-in-check');
        <?php endforeach; ?>
      });
    </script>
    <?php endif; ?>

    <?php endif; // game found ?>
  <?php endif; // page switch ?>

  <?php if ($page === 'lobby'): ?>
  <!-- Lobby-only JS (enhanced room creation) -->
  <script>
    console.log("Loading enhanced room creation system...");

const BOARD_PLAYER_LIMITS = {
  5: { min: 2, max: 3, name: "Small" },
  6: { min: 2, max: 4, name: "Medium" },
  7: { min: 2, max: 6, name: "Large" },
  8: { min: 2, max: 6, name: "Jumbo" }
};

    function updatePlayerOptions() {
      const boardSize = parseInt(document.getElementById('board_size').value);
      const playerCountSelect = document.getElementById('player_count');
      const gameType = document.getElementById('game_type').value;
      if (gameType === 'vs_ai') return;

      const limits = BOARD_PLAYER_LIMITS[boardSize];
      if (!limits) return;

      const currentValue = parseInt(playerCountSelect.value);
      playerCountSelect.innerHTML = '';
      for (let i=limits.min;i<=limits.max;i++){
        const opt = document.createElement('option');
        opt.value = i; opt.textContent = `${i} Players`;
        playerCountSelect.appendChild(opt);
      }
      if (currentValue >= limits.min && currentValue <= limits.max) {
        playerCountSelect.value = currentValue;
      } else {
        playerCountSelect.value = currentValue > limits.max ? limits.max : limits.min;
      }
      updateTimerVisibility();
      updateEnhancedDefaultGameName();
    }

    function updateEnhancedDefaultGameName() {
      const gameType = document.getElementById('game_type').value;
      const playerCount = document.getElementById('player_count').value;
      const boardSize = document.getElementById('board_size').value;
      const aiDifficulty = (document.getElementById('ai_difficulty') || {value:'medium'}).value;
      const gameNameField = document.getElementById('game_name');
      if (!gameNameField) return;

      const currentValue = gameNameField.value.trim();
      const isDefaultOrEmpty = currentValue === '' ||
        currentValue.match(/^(Online|vs AI|Hotseat|\w+ AI).*(Small|Medium|Large|Jumbo).*$/) ||
        currentValue.match(/^\d-Player (Small|Medium|Large|Jumbo) Game$/);

      if (!isDefaultOrEmpty) return;

      const sizeName = (BOARD_PLAYER_LIMITS[boardSize]||{}).name || 'Large';
      let defaultName = '';
      if (gameType === 'vs_ai') {
        const name = aiDifficulty.charAt(0).toUpperCase() + aiDifficulty.slice(1);
        defaultName = `${name} AI ${sizeName}`;
      } else {
        const typeName = (gameType === 'hotseat') ? 'Hotseat' : 'Online';
        defaultName = `${typeName} ${playerCount}P ${sizeName}`;
      }
      gameNameField.value = defaultName;
    }

    function updateEnhancedGameModeOptions() {
      const gameType = document.getElementById('game_type').value;
      const playersGroup = document.getElementById('players-group');
      const aiDifficultyGroup = document.getElementById('ai-difficulty-group');
      const playerCountSelect = document.getElementById('player_count');

      if (gameType === 'vs_ai') {
        aiDifficultyGroup.style.display = 'block';
        playersGroup.style.display = 'none';
        playerCountSelect.innerHTML = '<option value="2">2 Players</option>';
        playerCountSelect.value = '2';
      } else {
        aiDifficultyGroup.style.display = 'none';
        playersGroup.style.display = 'block';
        updatePlayerOptions();
      }
      updateTimerVisibility();
      updateEnhancedDefaultGameName();
    }

    function updateTimerVisibility() {
      const playerCount = parseInt(document.getElementById('player_count').value);
      const timerSettings = document.getElementById('timer-settings');
      if (!timerSettings) return;
      timerSettings.style.display = (playerCount >= 4) ? 'block' : 'none';
    }

    function resetToEnhancedDefaultName() {
      const field = document.getElementById('game_name');
      if (!field) return;
      field.value = '';
      updateEnhancedDefaultGameName();
    }

    function showValidationError(message) {
      console.error('Validation error:', message);
      const existing = document.querySelector('.validation-error');
      if (existing) existing.remove();
      const div = document.createElement('div');
      div.className = 'validation-error';
      div.style.cssText = 'background:rgba(231,76,60,.2);border:2px solid #e74c3c;border-radius:8px;padding:12px;margin:10px 0;color:#fff;font-size:14px;text-align:center;';
      div.textContent = message;
      const form = document.querySelector('form');
      const submitBtn = form.querySelector('button[type="submit"]');
      if (form && submitBtn) form.insertBefore(div, submitBtn);
      setTimeout(()=>{ if (div.parentElement) div.remove(); }, 5000);
    }

    function createEnhancedGame(event) {
      event.preventDefault();

const gameData = {
  action: 'create_game',
  game_name: formData.get('room_name') || `${playerCount}-Player Game`,
  player_count: formData.get('player_count'),
  board_size: formData.get('board_size'),
  ai_difficulty: formData.get('ai_difficulty') || 'medium',
  game_type: formData.get('game_type'),       // <-- add this
  turn_timer: formData.get('turn_timer') || '30',
  skip_action: formData.get('skip_action') || 'skip_turn'
};

// Keep this: map to legacy game_mode so older code paths work
if (formData.get('game_type') === 'vs_ai') {
  gameData.game_mode = 'ai';
} else if (formData.get('game_type') === 'hotseat') {
  gameData.game_mode = 'hotseat';
} else {
  gameData.game_mode = 'multiplayer';
}




      const formData = new FormData(event.target);
      const boardSize = parseInt(formData.get('board_size'));
      const playerCount = parseInt(formData.get('player_count'));
      const gameType = formData.get('game_type');

      if (gameType !== 'vs_ai') {
        const limits = BOARD_PLAYER_LIMITS[boardSize];
        if (limits && playerCount > limits.max) {
          showValidationError(`${limits.name} board supports maximum ${limits.max} players. Selected: ${playerCount} players.`);
          return;
        }
      }

      const payload = {
        action: 'create_game',
        room_name: formData.get('room_name') || `${playerCount}-Player Game`,
        player_count: formData.get('player_count'),
        board_size: formData.get('board_size'),
        ai_difficulty: formData.get('ai_difficulty') || 'medium',
        game_type: formData.get('game_type'),
        turn_timer: formData.get('turn_timer') || '30',
        skip_action: formData.get('skip_action') || 'skip_turn'
      };

      const btn = event.target.querySelector('button[type="submit"]');
      const txt = btn.textContent;
      btn.disabled = true; btn.textContent = 'Creating...';

      fetch('', {
        method: 'POST',
        headers: {'Content-Type':'application/x-www-form-urlencoded'},
        body: new URLSearchParams(payload)
      })
      .then(r => r.json())
      .then(data => {
        if (data.success) {
          // hotseat uses same ?page=game route (server hotseat gating already implemented)
          window.location.href = `?page=game&id=${data.game_id}`;
        } else {
          showValidationError(data.error || 'Failed to create game');
        }
      })
      .catch(() => showValidationError('Network error: Could not connect to server'))
      .finally(() => { btn.disabled = false; btn.textContent = txt; });
    }

    document.addEventListener('DOMContentLoaded', function(){
      const boardSizeSelect   = document.getElementById('board_size');
      const playerCountSelect = document.getElementById('player_count');
      const gameTypeSelect    = document.getElementById('game_type');
      const aiDifficultySelect= document.getElementById('ai_difficulty');

      if (boardSizeSelect)   boardSizeSelect.addEventListener('change', updatePlayerOptions);
      if (playerCountSelect) playerCountSelect.addEventListener('change', function(){ updateTimerVisibility(); updateEnhancedDefaultGameName(); });
      if (gameTypeSelect)    gameTypeSelect.addEventListener('change', updateEnhancedGameModeOptions);
      if (aiDifficultySelect)aiDifficultySelect.addEventListener('change', updateEnhancedDefaultGameName);

      updateEnhancedGameModeOptions();
      console.log('✓ Enhanced room creation system ready!');
    });
  </script>
  <?php endif; ?>

  <!-- Core JS bundle -->
  <script src="assets/game.js?v=49"></script>

  <script>
    // Page bootstrap
    <?php if (!$isLoggedIn && $page !== 'demo'): ?>
      showAuth('login');
    <?php elseif ($page === 'lobby'): ?>
      loadAvailableGames();
      if (document.getElementById('game_name')) { updateEnhancedDefaultGameName(); }
    <?php endif; ?>
  </script>
</body>
</html>

