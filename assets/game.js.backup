function showAuth(type) {
    document.getElementById('loginForm').style.display = type === 'login' ? 'block' : 'none';
    document.getElementById('registerForm').style.display = type === 'register' ? 'block' : 'none';
}

function login(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    formData.append('action', 'login');
    
    fetch(window.location.href, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            showNotification('Login Failed', data.error, 'error');
        }
    });
}

function register(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    formData.append('action', 'register');
    
    fetch(window.location.href, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            showNotification('Registration Failed', data.error, 'error');
        }
    });
}

function logout() {
    fetch(window.location.href, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'action=logout'
    })
    .then(() => location.reload());
}

function createGame(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    formData.append('action', 'create_game');
    
    fetch(window.location.href, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.href = `?page=game&id=${data.game_id}`;
        } else {
            showNotification('Failed to Create Game', data.error, 'error');
        }
    });
}

function joinGame(gameId) {
    fetch(window.location.href, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `action=join_game&game_id=${gameId}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.href = `?page=game&id=${gameId}`;
        } else {
            showNotification('Failed to Join', data.error, 'error');
        }
    });
}

function refreshGames() {
    loadAvailableGames();
}

function updateDefaultGameName() {
    const gameNameInput = document.getElementById('game_name');
    const playerCount = document.getElementById('player_count').value;
    const boardSize = document.getElementById('board_size').value;
    
    const currentValue = gameNameInput.value;
    const isDefaultPattern = /^\d-Player (Small|Medium|Large) Game$/.test(currentValue);
    
    if (isDefaultPattern || currentValue === '') {
        const sizeNames = {
            '6': 'Small',
            '7': 'Medium', 
            '8': 'Large'
        };
        
        const defaultName = `${playerCount}-Player ${sizeNames[boardSize]} Game`;
        gameNameInput.value = defaultName;
    }
}

function resetToDefaultName() {
    const playerCount = document.getElementById('player_count').value;
    const boardSize = document.getElementById('board_size').value;
    const gameNameInput = document.getElementById('game_name');
    
    const sizeNames = {
        '6': 'Small',
        '7': 'Medium', 
        '8': 'Large'
    };
    
    const defaultName = `${playerCount}-Player ${sizeNames[boardSize]} Game`;
    gameNameInput.value = defaultName;
    
    showNotification('✅ Name Reset', 'Game name reset to default', 'success');
}

function loadAvailableGames() {
    fetch('?api=games')
        .then(response => response.json())
        .then(games => {
            const gameList = document.getElementById('gameList');
            if (games.length === 0) {
                gameList.innerHTML = '<p>No games available. Create one!</p>';
                return;
            }
            
            gameList.innerHTML = games.map(game => `
                <div class="game-item">
                    <div class="game-info">
                        <h3>${game.game_name}</h3>
                        <p>${game.current_players}/${game.player_count} players • Created by ${game.creator}</p>
                    </div>
                    <button class="btn" onclick="joinGame('${game.game_id}')">Join</button>
                </div>
            `).join('');
        })
        .catch(error => {
            console.error('Error loading games:', error);
            document.getElementById('gameList').innerHTML = '<p>Error loading games.</p>';
        });
}

function showNotification(title, message, type = 'error') {
    const existing = document.querySelector('.notification');
    if (existing) existing.remove();
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-title">${title}</div>
        <div class="notification-message">${message}</div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('show'), 100);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// Game-specific JavaScript
function selectHex(q, r) {
    if (!userCanMove) {
        showNotification('Not Your Turn', 'Wait for your turn to move', 'warning');
        return;
    }
    
    const cell = document.querySelector(`[data-q="${q}"][data-r="${r}"]`);
    
    if (selectedHex && selectedHex.q === q && selectedHex.r === r) {
        clearSelection();
        return;
    }
    
    if (selectedHex && cell.classList.contains('valid-move')) {
        makeMove(selectedHex.q, selectedHex.r, q, r);
        return;
    }
    
    clearSelection();
    selectedHex = {q: q, r: r};
    cell.classList.add('selected');
    getValidMoves(q, r);
}

function clearSelection() {
    document.querySelectorAll('.hex-cell').forEach(cell => {
        cell.classList.remove('selected', 'valid-move');
    });
    selectedHex = null;
}

function clearCheckHighlights() {
    document.querySelectorAll('.hex-cell').forEach(cell => {
        cell.classList.remove('king-in-check');
    });
}

function getValidMoves(q, r) {
    fetch(window.location.href, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `action=getValidMoves&game_id=${gameId}&fromQ=${q}&fromR=${r}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success && data.validMoves && data.validMoves.length > 0) {
            data.validMoves.forEach(move => {
                const targetCell = document.querySelector(`[data-q="${move.q}"][data-r="${move.r}"]`);
                if (targetCell) {
                    targetCell.classList.add('valid-move');
                }
            });
        } else {
            clearSelection();
        }
    })
    .catch(error => {
        console.error('Error:', error);
        clearSelection();
    });
}

function makeMove(fromQ, fromR, toQ, toR) {
    fetch(window.location.href, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `action=move&game_id=${gameId}&fromQ=${fromQ}&fromR=${fromR}&toQ=${toQ}&toR=${toR}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            if (data.kingsInCheck && data.kingsInCheck.length > 0) {
                highlightKingsInCheck(data.kingsInCheck);
            }
            
            updateGameState(data.gameState);
            clearSelection();
        } else {
            if (data.errorType === 'exposes-king') {
                showNotification('⚠️ King in Danger!', 'That move would expose your king to check', 'warning');
            } else if (data.errorType === 'wrong-player') {
                showNotification('❌ Wrong Piece', 'You can only move your own pieces', 'error');
            } else if (data.errorType === 'no-piece') {
                showNotification('❌ No Piece', 'No piece at selected position', 'error');
            } else {
                showNotification('❌ Invalid Move', data.error || 'Move not allowed', 'error');
            }
        }
        clearSelection();
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('❌ Connection Error', 'Unable to make move', 'error');
        clearSelection();
    });
}

function highlightKingsInCheck(kingsInCheck) {
    clearCheckHighlights();
    kingsInCheck.forEach(king => {
        const kingCell = document.querySelector(`[data-q="${king.q}"][data-r="${king.r}"]`);
        if (kingCell) {
            kingCell.classList.add('king-in-check');
        }
    });
}

function updateGameState(gameState) {
    if (gameState.gameStatus.gameOver) {
        showNotification('🏁 Game Over', 'Game has ended!', 'success');
        userCanMove = false;
    }
    
    setTimeout(() => location.reload(), 1000);
}

// Demo JavaScript
function showPiece(pieceType) {
    currentPieceType = pieceType;
    
    document.querySelectorAll('.piece-nav-btn').forEach(btn => btn.classList.remove('active'));
    document.getElementById(`nav-${pieceType}`).classList.add('active');
    
    document.querySelectorAll('.piece-desc').forEach(desc => desc.classList.remove('active'));
    document.getElementById(`desc-${pieceType}`).classList.add('active');
    
    fetch(window.location.href, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `action=show_demo_piece&piece_type=${pieceType}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.querySelector('.game-main').innerHTML = data.boardHtml;
            
            if (data.piecePosition) {
                showDemoPieceMoves(data.piecePosition.q, data.piecePosition.r, pieceType);
            }
        }
    });
}

function showDemoPieceMoves(q, r, pieceType) {
    fetch(window.location.href, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `action=getDemoValidMoves&fromQ=${q}&fromR=${r}&piece_type=${pieceType}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            clearDemoHighlights();
            
            const pieceCell = document.querySelector(`[data-q="${q}"][data-r="${r}"]`);
            if (pieceCell) {
                pieceCell.classList.add('selected');
            }
            
            if (data.validMoves) {
                data.validMoves.forEach(move => {
                    const targetCell = document.querySelector(`[data-q="${move.q}"][data-r="${move.r}"]`);
                    if (targetCell) {
                        targetCell.classList.add('valid-move');
                    }
                });
            }
            
            if (data.captureSquares) {
                data.captureSquares.forEach(capture => {
                    const captureCell = document.querySelector(`[data-q="${capture.q}"][data-r="${capture.r}"]`);
                    if (captureCell) {
                        captureCell.classList.add('capture-square');
                    }
                });
            }
        }
    });
}

function clearDemoHighlights() {
    document.querySelectorAll('.hex-cell').forEach(cell => {
        cell.classList.remove('selected', 'valid-move', 'capture-square');
    });
}

// REPLACE the duplicate lobby functions in your game.js with these fixed versions:

//LOBBY - FIXED VERSIONS

// Lobby Management
let lobbyInterval = null;

function initializeLobby() {
    loadAvailableGames();
    // Auto-refresh lobby every 5 seconds
    lobbyInterval = setInterval(loadAvailableGames, 5000);
}

function stopLobbyRefresh() {
    if (lobbyInterval) {
        clearInterval(lobbyInterval);
        lobbyInterval = null;
    }
}

/*
//loadAvailableGames
function loadAvailableGames() {
    console.log('🔍 Simple test version');
    const gameList = document.getElementById('gameList');
    if (gameList) {
        gameList.innerHTML = '<p>🧪 Test: Function is working, API test needed</p>';
    }
}
*/

function loadAvailableGames() {
    console.log('Loading available games...');
    
    fetch('?api=games')
        .then(response => response.json())
        .then(games => {
            console.log('Games loaded:', games.length, 'games');
            const gameList = document.getElementById('gameList');
            
            if (games.length === 0) {
                gameList.innerHTML = '<p>No games available. Create one!</p>';
                return;
            }
            
            gameList.innerHTML = games.map(game => `
                <div class="game-item">
                    <div class="game-info">
                        <h3>${game.game_name}</h3>
                        <p>${game.current_players}/${game.player_count} players • Created by ${game.creator}</p>
                    </div>
                    <button class="btn" onclick="joinGame('${game.game_id}')">Join</button>
                </div>
            `).join('');
        })
        .catch(error => {
            console.error('Error loading games:', error);
            document.getElementById('gameList').innerHTML = '<p>Error loading games.</p>';
        });
}
/*
// FIXED - Use your existing API endpoint
function loadAvailableGames() {
    console.log('Loading available games...');
    
    fetch('?api=games')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(games => {
            console.log('Games loaded:', games);
            displayAvailableGames(games);
        })
        .catch(error => {
            console.error('Error loading games:', error);
            showLobbyError('Error connecting to server. Please refresh the page.');
        });
}
*/

/*
function displayAvailableGames(games) {
    const container = document.getElementById('available-games');
    if (!container) {
        console.error('available-games container not found');
        return;
    }
    
    if (games.length === 0) {
        container.innerHTML = `
            <div class="no-games">
                <h3>🎯 No Games Available</h3>
                <p>Be the first to create a game!</p>
            </div>
        `;
        return;
    }
    
    let html = '<h3>🎮 Available Games</h3>';
    games.forEach(game => {
        const spotsLeft = game.player_count - game.current_players;
        const timeAgo = getTimeAgo(game.created_at);
        
        html += `
            <div class="game-card" data-game-id="${game.game_id}">
                <div class="game-header">
<!--                    <h4>${escapeHtml(game.game_name)}</h4>
-->
                    <span class="game-time">${timeAgo}</span>
                </div>
                <div class="game-details">
                    <div class="game-info">
<!--
                        <span class="creator">👤 ${escapeHtml(game.creator)}</span>
-->
                        <span class="players">👥 ${game.current_players}/${game.player_count}</span>
                        <span class="board-size">📏 ${game.board_size}×${game.board_size}</span>
                    </div>
                    <div class="game-actions">
                        ${spotsLeft > 0 ? 
                            `<button class="join-btn" onclick="joinGameFromLobby('${game.game_id}')">
                                Join Game (${spotsLeft} spot${spotsLeft > 1 ? 's' : ''} left)
                            </button>` : 
                            `<span class="full-game">Game Full</span>`
                        }
                    </div>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}
*/

// FIXED - Renamed to avoid conflict with existing joinGame function
function joinGameFromLobby(gameId) {
    const button = document.querySelector(`[data-game-id="${gameId}"] .join-btn`);
    if (button) {
        button.disabled = true;
        button.textContent = 'Joining...';
    }
    
    // Use your existing API structure
    fetch(window.location.href, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `action=join_game&game_id=${gameId}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('✅ Joined Game', 'Successfully joined game!', 'success');
            // Use your existing URL structure
            setTimeout(() => {
                window.location.href = `?page=game&id=${gameId}`;
            }, 1000);
        } else {
            showNotification('❌ Join Failed', data.error || 'Failed to join game', 'error');
            if (button) {
                button.disabled = false;
                button.textContent = 'Join Game';
            }
        }
    })
    .catch(error => {
        console.error('Error joining game:', error);
        showNotification('❌ Connection Error', 'Error joining game. Please try again.', 'error');
        if (button) {
            button.disabled = false;
            button.textContent = 'Join Game';
        }
    });
}

/*
function showLobbyError(message) {
    const container = document.getElementById('available-games');
    if (container) {
        container.innerHTML = `
            <div class="error-message">
                <h3>⚠️ Error Loading Games</h3>
                <p>${escapeHtml(message)}</p>
                <button onclick="loadAvailableGames()" class="retry-btn">🔄 Retry</button>
            </div>
        `;
    }
}
*/

// FIXED - Use your existing createGame function, just add lobby refresh
function createGameFromLobby() {
    const form = document.getElementById('create-game-form');
    if (!form) return;
    
    const formData = new FormData(form);
    formData.append('action', 'create_game');
    
    const submitBtn = form.querySelector('button[type="submit"]');
    if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Creating...';
    }
    
    // Use your existing API structure
    fetch(window.location.href, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('✅ Game Created', 'Game created successfully!', 'success');
            form.reset();
            loadAvailableGames(); // Refresh the lobby
            // Use your existing URL structure
            setTimeout(() => {
                window.location.href = `?page=game&id=${data.game_id}`;
            }, 1000);
        } else {
            showNotification('❌ Creation Failed', data.error || 'Failed to create game', 'error');
        }
    })
    .catch(error => {
        console.error('Error creating game:', error);
        showNotification('❌ Connection Error', 'Error creating game. Please try again.', 'error');
    })
    .finally(() => {
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Create Game';
        }
    });
}


/*
function loadAvailableGames() {
    console.log('🔍 DEBUG: loadAvailableGames() called');
    console.log('🔍 DEBUG: Current URL:', window.location.href);
    console.log('🔍 DEBUG: Looking for element with ID "gameList"');
    
    const gameList = document.getElementById('gameList');
    console.log('🔍 DEBUG: gameList element found:', gameList);
    
    if (!gameList) {
        console.error('❌ DEBUG: gameList element not found!');
        return;
    }
    
    console.log('🔍 DEBUG: Starting fetch to ?api=games');
    
    fetch('?api=games')
        .then(response => {
            console.log('🔍 DEBUG: Fetch response received');
            console.log('🔍 DEBUG: Response status:', response.status);
            console.log('🔍 DEBUG: Response ok:', response.ok);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(games => {
            console.log('🔍 DEBUG: Games data received:', games);
            console.log('🔍 DEBUG: Games array length:', games.length);
            
            if (games.length === 0) {
                console.log('🔍 DEBUG: No games found, showing "no games" message');
                gameList.innerHTML = '<p>No games available. Create one!</p>';
                return;
            }
            
            console.log('🔍 DEBUG: Building game list HTML');
            const gameHtml = games.map(game => {
                console.log('🔍 DEBUG: Processing game:', game.game_name);
                return `
                    <div class="game-item">
                        <div class="game-info">
                            <h3>${game.game_name}</h3>
                            <p>${game.current_players}/${game.player_count} players • Created by ${game.creator}</p>
                        </div>
                        <button class="btn" onclick="joinGame('${game.game_id}')">Join</button>
                    </div>
                `;
            }).join('');
            
            console.log('🔍 DEBUG: Setting gameList innerHTML');
            gameList.innerHTML = gameHtml;
            console.log('🔍 DEBUG: Game list updated successfully');
        })
        .catch(error => {
            console.error('❌ DEBUG: Error in loadAvailableGames:', error);
            console.error('❌ DEBUG: Error details:', error.message);
            console.error('❌ DEBUG: Error stack:', error.stack);
            
            if (gameList) {
                gameList.innerHTML = '<p>Error loading games. Check console for details.</p>';
            }
        });
}
*/