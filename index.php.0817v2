<?php

// Add better error handling

ini_set('display_errors', 0);  // Turn OFF HTML errors
error_reporting(E_ALL);
ini_set('log_errors', 1);      // Log errors instead

session_start();

if (!class_exists('PoohGame')) {
    class PoohGame {
        public function __wakeup() { /* do nothing */ }
    }
}

// Include configuration and classes
require_once 'config/database.php';
require_once 'classes/Piece.php';
require_once 'classes/User.php';
require_once 'classes/GameManager.php';
require_once 'classes/HexChess.php';
require_once 'classes/HexChessAI.php';  // NEW: Include AI class
require_once 'utils/render.php';

// Initialize core objects
$user = new User($pdo);
$gameManager = new GameManager($pdo);

// Handle API requests (GET)
if (isset($_GET['api'])) {
    header('Content-Type: application/json');
    
    switch ($_GET['api']) {

case 'games':
    try {
        $stmt = $pdo->prepare("
            SELECT 
                g.game_id,
                g.game_name,
                g.status,
                g.player_count,
                g.game_mode,
                g.ai_difficulty,
                COUNT(gp.user_id) as current_players,
                creator.username as creator,
                GROUP_CONCAT(u.username SEPARATOR ', ') as player_names
            FROM games g
            LEFT JOIN game_players gp ON g.game_id = gp.game_id
            LEFT JOIN users creator ON g.creator_id = creator.id
            LEFT JOIN users u ON gp.user_id = u.id
            WHERE g.status = 'waiting'
            AND (g.game_type = 'chess' OR g.game_type = 'hexchess' OR g.game_type IS NULL)
            GROUP BY g.game_id
            ORDER BY g.created_at DESC
            LIMIT 20
        ");
        
        $stmt->execute();
        $games = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        // Format for frontend
        $result = array_map(function($game) {
            return [
                'game_id' => $game['game_id'],
                'game_name' => $game['game_name'] ?: 'Unnamed Game',
                'status' => $game['status'],
                'player_count' => (int)$game['player_count'],
                'current_players' => (int)$game['current_players'],
                'creator' => $game['creator'],
                'player_names' => $game['player_names'],
                'game_mode' => $game['game_mode'],
                'ai_difficulty' => $game['ai_difficulty']
            ];
        }, $games);
        
        echo json_encode($result);
    } catch (Exception $e) {
        echo json_encode(['error' => 'Database error: ' . $e->getMessage()]);
    }
    exit;


case 'my-games':
    if (!isset($_SESSION['user_id'])) {
        http_response_code(401);
        header('Content-Type: application/json');
        echo json_encode(['error' => 'Authentication required']);
        exit;
    }
    
    try {
        // Enhanced query to get player names
        $stmt = $pdo->prepare("
            SELECT 
                g.game_id,
                g.game_name,
                g.status,
                g.player_count,
                g.game_mode,
                g.ai_difficulty,
                gp.player_slot,
                w.username as winner_name,
                GROUP_CONCAT(
                    CASE 
                        WHEN u.id = ? THEN CONCAT(u.username, ' (You)')
                        WHEN g.game_mode = 'ai' AND u.id != ? THEN 
                            CASE g.ai_difficulty
                                WHEN 'easy' THEN 'Easy AI'
                                WHEN 'medium' THEN 'Medium AI' 
                                WHEN 'hard' THEN 'Hard AI'
                                ELSE 'AI'
                            END
                        ELSE u.username
                    END 
                    ORDER BY gp2.player_slot 
                    SEPARATOR ' vs '
                ) as player_names
            FROM games g
            JOIN game_players gp ON g.game_id = gp.game_id
            JOIN game_players gp2 ON g.game_id = gp2.game_id
            JOIN users u ON gp2.user_id = u.id
            LEFT JOIN users w ON g.winner_id = w.id
            WHERE gp.user_id = ?
            AND g.status IN ('waiting', 'active', 'finished')
            AND (g.game_type = 'chess' OR g.game_type = 'hexchess' OR g.game_type IS NULL)
            GROUP BY g.game_id, gp.player_slot
            ORDER BY g.created_at DESC
            LIMIT 20
        ");
        
        $stmt->execute([$_SESSION['user_id'], $_SESSION['user_id'], $_SESSION['user_id']]);
        $games = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        // Format for frontend
        $result = array_map(function($game) {
            return [
                'game_id' => $game['game_id'],
                'game_name' => $game['game_name'] ?: 'Unnamed Game',
                'status' => $game['status'],
                'player_count' => (int)$game['player_count'],
                'current_players' => (int)$game['player_count'],
                'is_your_turn' => false, // Will be calculated on frontend if needed
                'winner_name' => $game['winner_name'],
                'player_names' => $game['player_names'],
                'game_mode' => $game['game_mode'] ?? 'multiplayer'
            ];
        }, $games);
        
        header('Content-Type: application/json');
        echo json_encode($result);
        exit;
        
    } catch (Exception $e) {
        header('Content-Type: application/json');
        echo json_encode([
            'error' => 'Database error',
            'message' => $e->getMessage()
        ]);
        exit;
    }
    break;

        default:
            echo json_encode(['error' => 'Unknown API endpoint']);
            exit;
    }
    
}


// Handle AJAX POST requests for lobby actions
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
    header('Content-Type: application/json');
    
    try {
        switch ($_POST['action']) {


// ONLY THIS PART goes in the 'create_game' case in index.php:

// Add this temporary debugging to your create_game case in index.php
// This will help us see exactly what's failing

case 'create_game':
    // Enable error logging for debugging
    error_log("=== CREATE GAME DEBUG START ===");
    error_log("POST data: " . print_r($_POST, true));
    
    if (!isset($_SESSION['user_id'])) {
        error_log("Error: User not logged in");
        echo json_encode(['success' => false, 'error' => 'Not logged in']);
        exit;
    }
    
    // Get form data with debugging
    $roomName = trim($_POST['room_name'] ?? $_POST['game_name'] ?? '');
    $gameType = trim($_POST['game_type'] ?? 'online');
    $playerCount = (int)($_POST['player_count'] ?? 2);
    $boardSize = (int)($_POST['board_size'] ?? 7);
    $turnTimer = (int)($_POST['turn_timer'] ?? 30);
    $skipAction = trim($_POST['skip_action'] ?? 'skip_turn');
    
    error_log("Parsed data - Room: $roomName, Type: $gameType, Players: $playerCount, Board: $boardSize");
    
    // Validate board size + player count combination
    $boardLimits = [
        5 => ['min' => 2, 'max' => 3], // Small
        6 => ['min' => 2, 'max' => 4], // Medium  
        7 => ['min' => 2, 'max' => 5], // Large
        8 => ['min' => 2, 'max' => 6]  // Jumbo
    ];
    
    if (!isset($boardLimits[$boardSize])) {
        error_log("Error: Invalid board size: $boardSize");
        echo json_encode(['success' => false, 'error' => "Invalid board size: $boardSize"]);
        exit;
    }
    
    $limits = $boardLimits[$boardSize];
    if ($playerCount > $limits['max']) {
        $error = "Board size $boardSize supports maximum {$limits['max']} players. Requested: $playerCount";
        error_log("Error: $error");
        echo json_encode(['success' => false, 'error' => $error]);
        exit;
    }
    
    if ($playerCount < $limits['min']) {
        $error = "Minimum {$limits['min']} players required. Requested: $playerCount";
        error_log("Error: $error");
        echo json_encode(['success' => false, 'error' => $error]);
        exit;
    }
    
    // Handle legacy game_mode mapping
    $gameMode = 'multiplayer'; // default
    if (isset($_POST['game_mode'])) {
        $gameMode = $_POST['game_mode'];
    } else {
        // Map new game_type to legacy game_mode for existing code compatibility
        switch ($gameType) {
            case 'vs_ai':
                $gameMode = 'ai';
                break;
            case 'hotseat':
                $gameMode = 'hotseat';
                break;
            case 'online':
            default:
                $gameMode = 'multiplayer';
                break;
        }
    }
    
    $aiDifficulty = trim($_POST['ai_difficulty'] ?? 'medium');
    
    error_log("Mapped game mode: $gameMode, AI difficulty: $aiDifficulty");
    
    // Validation
    if (empty($roomName)) {
        error_log("Error: Room name is empty");
        echo json_encode(['success' => false, 'error' => 'Room name is required']);
        exit;
    }
    
    // For AI games, force 2 players
    if ($gameMode === 'ai') {
        $playerCount = 2;
        $gameType = 'vs_ai';
        error_log("AI game detected, forcing 2 players");
    }
    
    try {
        // Calculate starting positions for the player count
        $startingPositions = calculateStartingPositions($playerCount);
        error_log("Starting positions: " . json_encode($startingPositions));
        
        // Check if createGame method exists and what parameters it expects
        if (!method_exists($gameManager, 'createGame')) {
            error_log("Error: GameManager::createGame method does not exist");
            echo json_encode(['success' => false, 'error' => 'GameManager method missing']);
            exit;
        }
        
        // Try to call createGame - check if it accepts the new parameters
        $reflection = new ReflectionMethod($gameManager, 'createGame');
        $paramCount = $reflection->getNumberOfParameters();
        error_log("createGame method expects $paramCount parameters");
        
        // Call createGame with appropriate parameters based on what it expects
        if ($paramCount >= 9) {
            // New enhanced method
            $gameId = $gameManager->createGame(
                $_SESSION['user_id'], 
                $roomName, 
                $playerCount, 
                $boardSize, 
                $gameMode, 
                $aiDifficulty,
                $gameType,        // New parameter
                $turnTimer,       // New parameter  
                $skipAction,      // New parameter
                $startingPositions // New parameter
            );
        } else {
            // Legacy method - use old parameters
            error_log("Using legacy createGame method");
            $gameId = $gameManager->createGame(
                $_SESSION['user_id'], 
                $roomName, 
                $playerCount, 
                $boardSize, 
                $gameMode, 
                $aiDifficulty
            );
        }
        
        error_log("createGame returned: " . ($gameId ? $gameId : 'false'));


            if ($gameId) {
            error_log("SUCCESS: Game created with ID: $gameId");
            echo json_encode([
                'success' => true, 
                'game_id' => $gameId,
                'game_type' => $gameType,
                'player_count' => $playerCount
            ]);
        } else {
            error_log("ERROR: createGame returned false");
            echo json_encode(['success' => false, 'error' => 'Failed to create game in database']);
        }
        
    } catch (Exception $e) {
        $errorMsg = "Enhanced game creation error: " . $e->getMessage();
        error_log($errorMsg);
        error_log("Stack trace: " . $e->getTraceAsString());
        echo json_encode(['success' => false, 'error' => 'Server error: ' . $e->getMessage()]);
    }
    
    error_log("=== CREATE GAME DEBUG END ===");
    exit;


// INSTRUCTIONS:
// 1. Replace your current create_game case with the debug version above
// 2. Try creating a game and check your PHP error log
// 3. The log will show exactly where it's failing
// 4. Once we identify the issue, we can remove the debug logging
        
  
            case 'join_game':
                if (!isset($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }
                
                $gameId = trim($_POST['game_id'] ?? '');
                
                if (empty($gameId)) {
                    echo json_encode(['success' => false, 'error' => 'Game ID is required']);
                    exit;
                }
                
                // Try to join the game
                $result = $gameManager->joinGame($gameId, $_SESSION['user_id']);
                
                if ($result === true) {
                    echo json_encode(['success' => true]);
                } else {
                    echo json_encode(['success' => false, 'error' => $result ?: 'Failed to join game']);
                }
                exit;

            case 'resign':
                if (!isset($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }
                
                $gameId = trim($_POST['game_id'] ?? '');
                
                if (empty($gameId)) {
                    echo json_encode(['success' => false, 'error' => 'Game ID required']);
                    exit;
                }
                
                $gameInfo = $gameManager->getGame($gameId);
                if (!$gameInfo) {
                    echo json_encode(['success' => false, 'error' => 'Game not found']);
                    exit;
                }
                
                $game = $gameInfo['game'];
                $gameData = $gameInfo['data'];
                
                // Check if game is active
                if ($gameData['status'] !== 'active') {
                    echo json_encode(['success' => false, 'error' => 'Game is not active']);
                    exit;
                }
                
                // Find the player's slot
                $userPlayerSlot = null;
                foreach ($gameInfo['players'] as $player) {
                    if ($player['user_id'] == $_SESSION['user_id']) {
                        $userPlayerSlot = $player['player_slot'];
                        break;
                    }
                }
                
                if ($userPlayerSlot === null) {
                    echo json_encode(['success' => false, 'error' => 'You are not in this game']);
                    exit;
                }
                
                // Process resignation
                $result = $game->resignPlayer($userPlayerSlot);
                
                if ($result === true) {
                    // Save the updated game state
                    $gameManager->updateGameState($gameId, $game);
                    
                    // Check if game is over and finish it
                    $gameState = $game->getGameState();
                    if ($gameState['gameStatus']['gameOver']) {
                        $winnerId = $gameState['gameStatus']['winner'];
                        $gameManager->finishGame($gameId, $winnerId);
                        
                        // Update player stats
                        $userObj = new User($pdo);
                        
                        // Update resigning player as loss
                        $userObj->updateStats($_SESSION['user_id'], false);
                        
                        // Update winner if there is one
                        if ($winnerId) {
                            $userObj->updateStats($winnerId, true);
                        }
                        
                        // Update other active players (if 3-player game)
                        $playerUsers = $game->getPlayerUsers();
                        foreach ($playerUsers as $userId) {
                            if ($userId && $userId != $_SESSION['user_id'] && $userId != $winnerId) {
                                // For 3-player games, other players get neither win nor loss if game ends by resignation
                                // Or you could implement different logic here
                            }
                        }
                    }
                    
                    echo json_encode(['success' => true, 'message' => 'You have resigned from the game']);
                } else {
                    echo json_encode(['success' => false, 'error' => $result ?: 'Failed to resign']);
                }
                exit;
                
            case 'login':
                $username = trim($_POST['username'] ?? '');
                $password = $_POST['password'] ?? '';
                
                if (empty($username) || empty($password)) {
                    echo json_encode(['success' => false, 'error' => 'Username and password required']);
                    exit;
                }
                
                $userId = $user->login($username, $password);
                if ($userId) {
                    $_SESSION['user_id'] = $userId;
                    echo json_encode(['success' => true]);
                } else {
                    echo json_encode(['success' => false, 'error' => 'Invalid credentials']);
                }
                exit;
                
            case 'register':
                $username = trim($_POST['username'] ?? '');
                $password = $_POST['password'] ?? '';
                $email = trim($_POST['email'] ?? '');
                
                if (empty($username) || empty($password)) {
                    echo json_encode(['success' => false, 'error' => 'Username and password required']);
                    exit;
                }
                
                if (strlen($username) < 3) {
                    echo json_encode(['success' => false, 'error' => 'Username must be at least 3 characters']);
                    exit;
                }
                
                if (strlen($password) < 6) {
                    echo json_encode(['success' => false, 'error' => 'Password must be at least 6 characters']);
                    exit;
                }
                
                $userId = $user->register($username, $password, $email);
                if ($userId) {
                    $_SESSION['user_id'] = $userId;
                    echo json_encode(['success' => true]);
                } else {
                    echo json_encode(['success' => false, 'error' => 'Registration failed - username may be taken']);
                }
                exit;
                
            case 'logout':
                session_destroy();
                echo json_encode(['success' => true]);
                exit;
                
            case 'getValidMoves':
                if (!isset($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }
                
                $gameId = trim($_POST['game_id'] ?? '');
                $fromQ = (int)($_POST['fromQ'] ?? 0);
                $fromR = (int)($_POST['fromR'] ?? 0);
                
                if (empty($gameId)) {
                    echo json_encode(['success' => false, 'error' => 'Game ID required']);
                    exit;
                }
                
                $gameInfo = $gameManager->getGame($gameId);
                if (!$gameInfo) {
                    echo json_encode(['success' => false, 'error' => 'Game not found']);
                    exit;
                }
                
                $game = $gameInfo['game'];
                
                // Check if user can move
$gameData = $gameInfo['data'];
$isHotseat = isset($gameData['game_mode']) && $gameData['game_mode'] === 'hotseat';

// Only gate by user turn when NOT hotseat
if (!$isHotseat && !$game->canUserMove($_SESSION['user_id'])) {
    echo json_encode(['success' => false, 'error' => 'Not your turn']);
    exit;
}

                // Get valid moves
                $validMoves = $game->getValidMoves($fromQ, $fromR);
                echo json_encode(['success' => true, 'validMoves' => $validMoves]);
                exit;
                
            case 'move':
                if (!isset($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }
                
                $gameId = trim($_POST['game_id'] ?? '');
                $fromQ = (int)($_POST['fromQ'] ?? 0);
                $fromR = (int)($_POST['fromR'] ?? 0);
                $toQ = (int)($_POST['toQ'] ?? 0);
                $toR = (int)($_POST['toR'] ?? 0);
                
                if (empty($gameId)) {
                    echo json_encode(['success' => false, 'error' => 'Game ID required']);
                    exit;
                }
                
                $gameInfo = $gameManager->getGame($gameId);
                if (!$gameInfo) {
                    echo json_encode(['success' => false, 'error' => 'Game not found']);
                    exit;
                }
                
                $game = $gameInfo['game'];
                
                // Check if user can move
$gameData = $gameInfo['data'];
$isHotseat = isset($gameData['game_mode']) && $gameData['game_mode'] === 'hotseat';

// Only enforce per-user turn for non-hotseat games
if (!$isHotseat && !$game->canUserMove($_SESSION['user_id'])) {
    echo json_encode(['success' => false, 'error' => 'Not your turn']);
    exit;
}

                try {
                    // Use the correct method name: movePiece instead of makeMove
                    $result = $game->movePiece($fromQ, $fromR, $toQ, $toR);
                    
                    if ($result === true) {
                        // Save the game state
                        if (method_exists($gameManager, 'updateGameState')) {
                            $gameManager->updateGameState($gameId, $game);
                        } elseif (method_exists($gameManager, 'saveGame')) {
                            $gameManager->saveGame($gameId, $game);
                        }
                        
                        // Get updated game state
                        $gameState = $game->getGameState();
                        
                        // Check for kings in check - use the correct method name
                        $kingsInCheck = $gameState['kingsInCheck'] ?? [];
                        
                        echo json_encode([
                            'success' => true, 
                            'gameState' => $gameState,
                            'kingsInCheck' => $kingsInCheck
                        ]);
                    } else {
                        // Move failed, provide specific error type if available
                        $errorType = null;
                        $errorMessage = is_string($result) ? $result : 'Invalid move';
                        
                        if (strpos($errorMessage, 'expose') !== false || strpos($errorMessage, 'check') !== false) {
                            $errorType = 'exposes-king';
                        } elseif (strpos($errorMessage, 'piece') !== false) {
                            $errorType = 'wrong-player';
                        } elseif (strpos($errorMessage, 'no piece') !== false) {
                            $errorType = 'no-piece';
                        }
                        
                        echo json_encode([
                            'success' => false, 
                            'error' => $errorMessage,
                            'errorType' => $errorType
                        ]);
                    }
                } catch (Exception $e) {
                    echo json_encode(['success' => false, 'error' => 'Move failed: ' . $e->getMessage()]);
                }
                exit;
                

case 'ai_move':
                if (!isset($_SESSION['user_id'])) {
                    echo json_encode(['success' => false, 'error' => 'Not logged in']);
                    exit;
                }
                
                $gameId = trim($_POST['game_id'] ?? '');
                if (empty($gameId)) {
                    echo json_encode(['success' => false, 'error' => 'Game ID required']);
                    exit;
                }
                
                try {
                    $gameInfo = $gameManager->getGame($gameId);
                    if (!$gameInfo) {
                        echo json_encode(['success' => false, 'error' => 'Game not found']);
                        exit;
                    }
                    
                    $game = $gameInfo['game'];
                    $gameData = $gameInfo['data'];
                    $players = $gameInfo['players'];
                    
                    // Enhanced AI game detection
                    $gameMode = $gameData['game_mode'] ?? '';
                    if ($gameMode !== 'ai') {
                        echo json_encode(['success' => false, 'error' => 'Not an AI game']);
                        exit;
                    }
                    
                    // Find AI player slot
                    $aiPlayerSlot = null;
                    foreach ($players as $player) {
                        if ($player['user_id'] != $_SESSION['user_id']) {
                            $aiPlayerSlot = $player['player_slot'];
                            break;
                        }
                    }
                    
                    if ($aiPlayerSlot === null) {
                        // Fallback
                        $userPlayerSlot = null;
                        foreach ($players as $player) {
                            if ($player['user_id'] == $_SESSION['user_id']) {
                                $userPlayerSlot = $player['player_slot'];
                                break;
                            }
                        }
                        $aiPlayerSlot = ($userPlayerSlot == 0) ? 1 : 0;
                    }
                    
                    $currentPlayerSlot = $game->getCurrentPlayerSlot();
                    
                    // Check if it's AI's turn
                    if ($currentPlayerSlot !== $aiPlayerSlot) {
                        echo json_encode(['success' => false, 'error' => 'Not AI turn']);
                        exit;
                    }
                    
                    // Get AI difficulty
                    $aiDifficulty = $gameData['ai_difficulty'] ?? 'medium';
                    
                    // Create AI and make move
                    $ai = new HexChessAI($game, $aiDifficulty, $aiPlayerSlot);
                    $result = $ai->makeMove();
                    
                    if ($result === true) {
                        // Save the updated game state
                        $gameManager->updateGameState($gameId, $game);
                        
                        // Get updated game state
                        $gameState = $game->getGameState();
                        
                        echo json_encode([
                            'success' => true,
                            'gameState' => $gameState,
                            'kingsInCheck' => $gameState['kingsInCheck'] ?? [],
                            'aiName' => method_exists($ai, 'getAIName') ? $ai->getAIName() : 'AI',
                            'newCurrentPlayer' => $game->getCurrentPlayerSlot()
                        ]);
                    } else {
                        echo json_encode(['success' => false, 'error' => 'AI move failed', 'result' => $result]);
                    }
                    
                } catch (Exception $e) {
                    echo json_encode(['success' => false, 'error' => 'AI error: ' . $e->getMessage()]);
                }
                exit;

            default:
                echo json_encode(['success' => false, 'error' => 'Unknown action']);
                exit;
        }
    } catch (Exception $e) {
        error_log("AJAX Error: " . $e->getMessage());
        echo json_encode(['success' => false, 'error' => 'Server error occurred']);
        exit;
    }


}

function calculateStartingPositions($playerCount) {
    // Hex board has 6 corners (positions 0-5 going clockwise)
    switch ($playerCount) {
        case 2: return [0, 3];        // Opposite corners
        case 3: return [0, 2, 4];     // Every other corner (120° apart)
        case 4: return [0, 1, 3, 4];  // Alternating corners
        case 5: return [0, 1, 2, 3, 4]; // Five corners
        case 6: return [0, 1, 2, 3, 4, 5]; // All corners
        default: return [0, 3];       // Fallback for 2 players
    }
}

// Check if user is logged in
$isLoggedIn = isset($_SESSION['user_id']);
$currentUser = $isLoggedIn ? $user->getUserById($_SESSION['user_id']) : null;

// Handle different pages
$page = $_GET['page'] ?? 'lobby';

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HexChess Online</title>
<link rel="stylesheet" href="assets/styles.css?v=2.1">
</head>
<body>
    <div class="header">
        <h1>🏰 HexChess Online</h1>
        <div class="user-info">
            <?php if ($isLoggedIn): ?>
                <span>Welcome, <?php echo htmlspecialchars($currentUser['username']); ?>!</span>
                <span>(<?php echo $currentUser['wins']; ?>W-<?php echo $currentUser['losses']; ?>L)</span>
                <button class="btn btn-secondary" onclick="logout()">Logout</button>
            <?php else: ?>
                <button class="btn btn-secondary" onclick="window.location.href='?page=demo'">📚 Demo</button>
                <button class="btn" onclick="showAuth('login')">Login</button>
                <button class="btn btn-secondary" onclick="showAuth('register')">Register</button>
            <?php endif; ?>
        </div>
    </div>

    <?php if (!$isLoggedIn && $page !== 'demo'): ?>
        <!-- Authentication forms -->
        <div class="auth-container" id="loginForm" style="display: none;">
            <h2>Login</h2>
            <form onsubmit="login(event)">
                <div class="form-group">
                    <label>Username:</label>
                    <input type="text" name="username" required>
                </div>
                <div class="form-group">
                    <label>Password:</label>
                    <input type="password" name="password" required>
                </div>
                <button type="submit" class="btn" style="width: 100%;">Login</button>
            </form>
            <p style="text-align: center; margin-top: 1rem;">
                <a href="#" onclick="showAuth('register')" style="color: #fff;">Need an account? Register</a>
            </p>
            <p style="text-align: center; margin-top: 0.5rem;">
                <a href="?page=demo" style="color: #2ecc71;">📚 Try the Piece Movement Demo</a>
            </p>
        </div>
        
        <div class="auth-container" id="registerForm" style="display: none;">
            <h2>Register</h2>
            <form onsubmit="register(event)">
                <div class="form-group">
                    <label>Username (3+ characters):</label>
                    <input type="text" name="username" minlength="3" required>
                </div>
                <div class="form-group">
                    <label>Password (6+ characters):</label>
                    <input type="password" name="password" minlength="6" required>
                </div>
                <div class="form-group">
                    <label>Email (optional):</label>
                    <input type="email" name="email">
                </div>
                <button type="submit" class="btn" style="width: 100%;">Register</button>
            </form>
            <p style="text-align: center; margin-top: 1rem;">
                <a href="#" onclick="showAuth('login')" style="color: #fff;">Have an account? Login</a>
            </p>
            <p style="text-align: center; margin-top: 0.5rem;">
                <a href="?page=demo" style="color: #2ecc71;">📚 Try the Piece Movement Demo</a>
            </p>
        </div>

    <?php elseif ($page === 'lobby'): ?>
        <!-- Lobby -->
        <div class="container">
            <div class="lobby">
<div class="panel">
    <h2>🎮 Create New Game</h2>
    <form onsubmit="createEnhancedGame(event)">
        <!-- Game Type Selector (NEW) -->
        <div class="form-group">
            <label>Game Type:</label>
            <select name="game_type" id="game_type" onchange="updateEnhancedGameModeOptions()">
                <option value="online">👥 Online Multiplayer</option>
                <option value="vs_ai">🤖 vs AI</option>
                <option value="hotseat">🏠 Local Hotseat</option>
            </select>
        </div>

        <!-- Enhanced Player Count (UPDATED) -->
        <div class="form-group" id="players-group">
            <label>Players:</label>
            <select name="player_count" id="player_count" onchange="updateEnhancedDefaultGameName()">
                <option value="2">2 Players</option>
                <option value="3">3 Players</option>
                <option value="4">4 Players</option>
                <option value="5">5 Players</option>
                <option value="6">6 Players</option>
            </select>
        </div>
        
        <!-- AI Difficulty (keep existing) -->
        <div class="form-group" id="ai-difficulty-group" style="display: none;">
            <label>AI Difficulty:</label>
            <select name="ai_difficulty" id="ai_difficulty" onchange="updateEnhancedDefaultGameName()">
                <option value="easy">🟢 Easy (Rookie)</option>
                <option value="medium" selected>🟡 Medium (Knight)</option>
                <option value="hard">🔴 Hard (Master)</option>
            </select>
        </div>
        
        <!-- Board Size (keep existing) -->
        <div class="form-group">
            <label>Board Size:</label>
            <select name="board_size" id="board_size" onchange="updateEnhancedDefaultGameName()">
                <option value="5">Small Board</option>
                <option value="6">Medium Board</option>
                <option value="7" selected>Large Board</option>
                <option value="8">Jumbo Board</option>
            </select>
        </div>

        <!-- Timer Settings (NEW) -->
        <div id="timer-settings" class="timer-settings" style="display: none;">
            <div class="timer-info">
                <strong>⏱️ Turn Timer (for 4-6 player games)</strong>
            </div>
            <div class="form-row" style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                <div class="form-group">
                    <label>Turn Time Limit:</label>
                    <select name="turn_timer">
                        <option value="30">30 seconds</option>
                        <option value="60">1 minute</option>
                        <option value="120">2 minutes</option>
                        <option value="300">5 minutes</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>When Timer Expires:</label>
                    <select name="skip_action">
                        <option value="skip_turn">Skip Turn</option>
                        <option value="eliminate">Eliminate Player</option>
                    </select>
                </div>
            </div>
        </div>
        
        <!-- Game Name (keep existing) -->
        <div class="form-group">
            <label>Game Name:</label>
            <input type="text" name="room_name" id="game_name" 
                   placeholder="Enter custom name or use default"
                   value="2-Player Large Game"
                   maxlength="100">
            <div class="form-helper">
                <small>Customize your room name</small>
                <button type="button" class="btn-reset" onclick="resetToEnhancedDefaultName()">Reset to Default</button>
            </div>
        </div>
        
        <button type="submit" class="btn" style="width: 100%;">Create Game</button>
    </form>
    
    <!-- Keep your existing demo button -->
    <div style="margin-top: 1rem; padding-top: 1rem; border-top: 1px solid rgba(255,255,255,0.2);">
        <button class="btn btn-secondary" onclick="window.location.href='?page=demo'" style="width: 100%;">
            📚 Learn Piece Movements
        </button>
    </div>
</div>
                
                <div class="panel">
                    <h2>🎯 Your Active Games</h2>
                    <div class="game-list" id="my-games">
                        <p>Loading your games...</p>
                    </div>
                    <button class="btn btn-secondary" onclick="loadMyGames()" style="width: 100%; margin-top: 1rem;">Refresh My Games</button>
                </div>
            </div>
            
            <div class="lobby" style="margin-top: 2rem;">
                <div class="panel" style="grid-column: 1 / -1;">
                    <h2>🌐 Available Games</h2>
                    <div class="game-list" id="available-games">
                        <p>Loading games...</p>
                    </div>
                    <button class="btn btn-secondary" onclick="loadAvailableGames()" style="width: 100%; margin-top: 1rem;">Refresh</button>
                </div>
            </div>
        </div>

    <?php elseif ($page === 'demo'): ?>
        <!-- Piece Movement Demo -->
        <div class="game-area">
            <div class="game-sidebar">
                <div class="game-status">
                    <h3>📚 Piece Movement Demo</h3>
                    <p>Select a piece type to see how it moves!</p>
                </div>
                
                <div class="player-list">
                    <h3 style="margin-bottom: 20px;">Choose Piece Type</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; margin-bottom: 15px;">
                        <button class="piece-nav-btn active" onclick="showPiece('king')" id="nav-king">
                            ♚ King
                        </button>
                        <button class="piece-nav-btn" onclick="showPiece('queen')" id="nav-queen">
                            ♛ Queen
                        </button>
                        <button class="piece-nav-btn" onclick="showPiece('rook')" id="nav-rook">
                            ♜ Rook
                        </button>
                        <button class="piece-nav-btn" onclick="showPiece('bishop')" id="nav-bishop">
                            ♝ Bishop
                        </button>
                        <button class="piece-nav-btn" onclick="showPiece('knight')" id="nav-knight">
                            ♞ Knight
                        </button>
                        <button class="piece-nav-btn" onclick="showPiece('pawn')" id="nav-pawn">
                            ♟ Pawn
                        </button>
                    </div>
                    
                    <div id="piece-description">
                        <div id="desc-king" class="piece-desc active">
                            <h4>♚ King Movement</h4>
                            <p>Moves one space in any direction - all 6 orthogonal directions (like rook) plus all 6 diagonal directions (like bishop) = 12 total moves</p>
                        </div>
                        <div id="desc-queen" class="piece-desc">
                            <h4>♛ Queen Movement</h4>
                            <p>Moves any distance in straight lines or diagonals (combines rook and bishop movement)</p>
                        </div>
                        <div id="desc-rook" class="piece-desc">
                            <h4>♜ Rook Movement</h4>
                            <p>Moves any distance along the three main hex axes (orthogonal directions)</p>
                        </div>
                        <div id="desc-bishop" class="piece-desc">
                            <h4>♝ Bishop Movement</h4>
                            <p>Moves any distance along the three diagonal hex directions</p>
                        </div>
                        <div id="desc-knight" class="piece-desc">
                            <h4>♞ Knight Movement</h4>
                            <p>Jumps in an L-shape: 2 spaces in one direction, then 1 space perpendicular</p>
                        </div>
                        <div id="desc-pawn" class="piece-desc">
                            <h4>♟ Pawn Movement</h4>
                            <p>Moves forward one space (toward opponent). Captures diagonally forward (red squares show capture zones)</p>
                        </div>
                    </div>
                </div>
                
                <?php if ($isLoggedIn): ?>
                    <div style="display: flex; gap: 10px; flex-direction: column;">
                        <button class="btn btn-secondary" onclick="window.location.href='?page=lobby'">
                            Back to Lobby
                        </button>
                    </div>
                <?php else: ?>
                    <button class="btn btn-secondary" onclick="window.location.href='?'">← Back to Login</button>
                <?php endif; ?>
            </div>
            
            <div class="game-main">
                <?php 
                // Create a demo game for learning
                $demoGame = createDemoBoard();
                echo renderDemoBoard($demoGame, 'king');
                ?>
            </div>
        </div>

    <?php elseif ($page === 'game'): ?>
        <!-- Game page -->
        <?php
        $gameId = $_GET['id'] ?? '';
        $gameInfo = $gameManager->getGame($gameId);
        
        if (!$gameInfo):
        ?>
            <div class="container">
                <div class="panel">
                    <h2>Game Not Found</h2>
                    <p>The requested game could not be found.</p>
                    <button class="btn" onclick="window.location.href='?page=lobby'">Back to Lobby</button>
                </div>
            </div>
        <?php else:
            $game = $gameInfo['game'];
            $players = $gameInfo['players'];
            $gameData = $gameInfo['data'];
            $gameState = $game->getGameState();
            
            $userPlayerSlot = null;
            foreach ($players as $player) {
                if ($player['user_id'] == $_SESSION['user_id']) {
                    $userPlayerSlot = $player['player_slot'];
                    break;
                }
            }
            
            $canMove = $userPlayerSlot !== null && $game->canUserMove($_SESSION['user_id']);
            $gameActive = $gameData['status'] === 'active';
            $userInGame = $userPlayerSlot !== null;
        ?>
            <div class="game-area">
                <div class="game-sidebar">
                    <div class="game-status">
                        <h3 id="gameStatus">
                            <?php 
                            if ($gameState['gameStatus']['gameOver']) {
                                echo "Game Over";
                            } elseif ($gameData['status'] === 'waiting') {
                                echo "Waiting for Players";
                            } else {
                                echo "Game Active";
                            }
                            ?>
                        </h3>
                        <p id="gameStatusText">
                            <?php 
                            if ($gameState['gameStatus']['gameOver']) {
                                if (isset($gameState['gameStatus']['winner'])) {
                                    $winnerName = "Unknown";
                                    foreach ($players as $player) {
                                        if ($player['user_id'] == $gameState['gameStatus']['winner']) {
                                            $winnerName = $player['username'];
                                            break;
                                        }
                                    }
                                    echo "Winner: " . htmlspecialchars($winnerName);
} else {
    // Check if it's stalemate vs draw
    $gameOverReason = $gameState['gameStatus']['reason'] ?? 'draw';
    if ($gameOverReason === 'stalemate') {
        echo '<div style="font-size: 20px; font-weight: bold; color: #f39c12;">';
        echo '🤝 STALEMATE - No legal moves available';
        echo '</div>';
    } else {
        echo '<div style="font-size: 20px; font-weight: bold; color: #f39c12;">';
        echo '🤝 DRAW - Game ended in a tie';
        echo '</div>';
    }
}                            } elseif ($gameData['status'] === 'waiting') {
                                echo "Need " . ($game->getPlayerCount() - count($players)) . " more player(s)";
                            } elseif ($canMove) {
                                echo "Your turn!";
                            } else {
                                echo "Waiting for " . ucfirst($game->getCurrentPlayer()) . " player";
                            }
                            ?>
                        </p>
                        
                        <?php if ($gameState['isInCheck']): ?>
                            <div class="check-warning">
                                <strong>⚠️ Your King is in Check!</strong>
                            </div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="player-list">
                        <h3>Players</h3>
                        <div id="playerList">

<?php foreach ($players as $player): ?>
    <div class="player-item <?php echo $player['player_slot'] == $game->getCurrentPlayerSlot() ? 'current' : ''; ?>">
        <strong><?php echo ucfirst($game->getPlayers()[$player['player_slot']]); ?></strong><br>
        <?php if ($player['user_id'] == $_SESSION['user_id']): ?>
            <?php echo htmlspecialchars($player['username']); ?>
            <small>(You)</small>
        <?php elseif ($gameData['game_mode'] === 'ai'): ?>
            <?php 
            $aiDifficulty = $gameData['ai_difficulty'] ?? 'medium';
            $difficultyColors = [
                'easy' => '#2ecc71',    // Green
                'medium' => '#f39c12',  // Orange  
                'hard' => '#e74c3c'     // Red
            ];
            $difficultyNames = [
                'easy' => '🟢 Easy AI',
                'medium' => '🟡 Medium AI', 
                'hard' => '🔴 Hard AI'
            ];
            ?>
            <span style="color: <?php echo $difficultyColors[$aiDifficulty]; ?>; font-weight: bold;">
                <?php echo $difficultyNames[$aiDifficulty]; ?>
            </span>
        <?php else: ?>
            <?php echo htmlspecialchars($player['username']); ?>
        <?php endif; ?>
    </div>
<?php endforeach; ?>

                        </div>
                    </div>
                    
                    <div class="game-controls">
                        <button class="btn btn-secondary" onclick="window.open('?page=demo', '_blank')" style="width: 100%; margin-bottom: 10px;">📚 Piece Movements</button>
                        
                        <?php if ($gameActive && $userInGame && !$gameState['gameStatus']['gameOver']): ?>
                            <button class="btn btn-danger" onclick="resignGame()" style="width: 100%; margin-bottom: 10px;">
                                🏳️ Resign Game
                            </button>
                        <?php endif; ?>
                        
                        <button class="btn btn-secondary" onclick="window.location.href='?page=lobby'" style="width: 100%;">Back to Lobby</button>
                    </div>
                </div>
                <div id="hexchess-root"
     data-game-id="<?php echo htmlspecialchars($gameId); ?>"
     data-user-can-move="<?php echo $canMove ? '1' : '0'; ?>"
     data-game-mode="<?php echo htmlspecialchars($gameMode); ?>"
     data-current-player-slot="<?php echo (int)$currentPlayerSlot; ?>"
     data-user-player-slot="<?php echo (int)$userPlayerSlot; ?>"
     data-ai-player-slot="<?php echo $aiPlayerSlot === null ? '' : (int)$aiPlayerSlot; ?>">
</div>
<!--
                <div class="game-main">
                    <?php echo renderBoard($game, $gameId, $canMove); ?>
                </div>
-->
                
 <script>
                    // Basic game variables
                    var gameId = '<?php echo htmlspecialchars($gameId); ?>';
                    var userCanMove = <?php echo $canMove ? 'true' : 'false'; ?>;
                    
                    <script>
  if (typeof gameMode !== 'undefined' && gameMode === 'hotseat') {
    // Always allow clicks; server will accept for hotseat.
    userCanMove = true;
  }
</script>



                    // Enhanced game state variables
                    <?php
                    // Get enhanced game state
                    $gameMode = $gameData['game_mode'] ?? 'multiplayer';
                    $isAIGame = ($gameMode === 'ai');
                    $currentPlayerSlot = method_exists($game, 'getCurrentPlayerSlot') ? $game->getCurrentPlayerSlot() : null;
                    
                    // Find AI player slot
                    $aiPlayerSlot = null;
                    if ($isAIGame) {
                        foreach ($players as $player) {
                            if ($player['user_id'] != $_SESSION['user_id']) {
                                $aiPlayerSlot = $player['player_slot'];
                                break;
                            }
                        }
                        if ($aiPlayerSlot === null) {
                            $aiPlayerSlot = ($userPlayerSlot == 0) ? 1 : 0;
                        }
                    }
                    ?>
                    
                    var gameMode = '<?php echo htmlspecialchars($gameMode); ?>';
                    var isAIGame = <?php echo $isAIGame ? 'true' : 'false'; ?>;
                    var currentPlayerSlot = <?php echo json_encode($currentPlayerSlot); ?>;
                    var userPlayerSlot = <?php echo json_encode($userPlayerSlot); ?>;
                    var aiPlayerSlot = <?php echo json_encode($aiPlayerSlot); ?>;
                    
                    // Highlight kings in check on page load
                    <?php if (!empty($gameState['kingsInCheck'])): ?>
                        document.addEventListener('DOMContentLoaded', function() {
                            <?php foreach ($gameState['kingsInCheck'] as $king): ?>
                                var kingCell = document.querySelector('[data-q="<?php echo $king['q']; ?>"][data-r="<?php echo $king['r']; ?>"]');
                                if (kingCell) {
                                    kingCell.classList.add('king-in-check');
                                }
                            <?php endforeach; ?>
                        });
                    <?php endif; ?>
                </script>
                
                            </div>
            
        <?php endif; ?>
    <?php endif; ?>

<?php if ($page === 'lobby'): ?>

    <!-- Include JavaScript -->
           
    <!-- ============================================================ -->
    <!-- ENHANCED ROOM CREATION JAVASCRIPT - ADD THIS SECTION HERE   -->
    <!-- ============================================================ -->
    <script>
    // =================================================================
    // SECTION: Enhanced Room Creation System
    // =================================================================
    // This section handles the new room creation form with:
    // - Game type selection (Online/AI/Hotseat)  
    // - Player count validation based on board size
    // - Automatic room name generation
    // - Timer settings for 4+ player games
    // =================================================================
    
    console.log("Loading enhanced room creation system...");
    
    // Board size limits for different player counts
    const BOARD_PLAYER_LIMITS = {
        5: { min: 2, max: 3, name: "Small" },    // Small board: 2-3 players max
        6: { min: 2, max: 4, name: "Medium" },   // Medium board: 2-4 players max  
        7: { min: 2, max: 5, name: "Large" },    // Large board: 2-5 players max
        8: { min: 2, max: 6, name: "Jumbo" }     // Jumbo board: 2-6 players max
    };
    
    // Function: Update available player options based on board size
    function updatePlayerOptions() {
        const boardSize = parseInt(document.getElementById('board_size').value);
        const playerCountSelect = document.getElementById('player_count');
        const gameType = document.getElementById('game_type').value;
        
        // Skip for AI games (always 2 players)
        if (gameType === 'vs_ai') {
            return;
        }
        
        const limits = BOARD_PLAYER_LIMITS[boardSize];
        if (!limits) return;
        
        // Get current selection before rebuilding
        const currentValue = parseInt(playerCountSelect.value);
        
        // Clear and rebuild player count options
        playerCountSelect.innerHTML = '';
        
        for (let i = limits.min; i <= limits.max; i++) {
            const option = document.createElement('option');
            option.value = i;
            option.textContent = `${i} Players`;
            playerCountSelect.appendChild(option);
        }
        
        // Restore selection if still valid
        if (currentValue >= limits.min && currentValue <= limits.max) {
            playerCountSelect.value = currentValue;
        } else {
            // Use closest valid option
            playerCountSelect.value = currentValue > limits.max ? limits.max : limits.min;
        }
        
        // Update other form elements
        updateTimerVisibility();
        updateEnhancedDefaultGameName();
    }
    
    // Function: Generate default room names automatically
    function updateEnhancedDefaultGameName() {
        const gameType = document.getElementById('game_type').value;
        const playerCount = document.getElementById('player_count').value;
        const boardSize = document.getElementById('board_size').value;
        const aiDifficulty = document.getElementById('ai_difficulty').value;
        const gameNameField = document.getElementById('game_name');
        
        if (!gameNameField) {
            console.log("Game name field not found - skipping name update");
            return;
        }
        
        // Only update if field is empty or contains a default name
        const currentValue = gameNameField.value.trim();
        const isDefaultOrEmpty = currentValue === '' || 
            currentValue.match(/^(Online|vs AI|Hotseat|\w+ AI).*(Small|Medium|Large|Jumbo).*$/) ||
            currentValue.match(/^\d-Player (Small|Medium|Large|Jumbo) Game$/);
        
        if (isDefaultOrEmpty) {
            let defaultName = '';
            
            if (gameType === 'vs_ai') {
                // AI game names: "Medium AI Large"
                const difficultyName = aiDifficulty ? aiDifficulty.charAt(0).toUpperCase() + aiDifficulty.slice(1) : 'Medium';
                const sizeName = BOARD_PLAYER_LIMITS[boardSize]?.name || 'Large';
                defaultName = `${difficultyName} AI ${sizeName}`;
            } else {
                // Multiplayer game names: "Online 4P Large"
                const typeName = gameType === 'hotseat' ? 'Hotseat' : 'Online';
                const sizeName = BOARD_PLAYER_LIMITS[boardSize]?.name || 'Large';
                defaultName = `${typeName} ${playerCount}P ${sizeName}`;
            }
            
            gameNameField.value = defaultName;
            console.log('Updated room name to:', defaultName);
        }
    }
    
    // Function: Handle game type changes (Online/AI/Hotseat)
    function updateEnhancedGameModeOptions() {
        const gameType = document.getElementById('game_type').value;
        const playersGroup = document.getElementById('players-group');
        const aiDifficultyGroup = document.getElementById('ai-difficulty-group');
        const playerCountSelect = document.getElementById('player_count');
        
        if (gameType === 'vs_ai') {
            // Show AI difficulty, hide player count
            if (aiDifficultyGroup) aiDifficultyGroup.style.display = 'block';
            if (playersGroup) playersGroup.style.display = 'none';
            
            // Force 2 players for AI games
            playerCountSelect.innerHTML = '<option value="2">2 Players</option>';
            playerCountSelect.value = '2';
        } else {
            // Show player count, hide AI difficulty
            if (aiDifficultyGroup) aiDifficultyGroup.style.display = 'none';
            if (playersGroup) playersGroup.style.display = 'block';
            
            // Rebuild player options based on current board size
            updatePlayerOptions();
        }
        
        updateTimerVisibility();
        updateEnhancedDefaultGameName();
    }
    
    // Function: Show/hide timer settings for 4+ player games
    function updateTimerVisibility() {
        const playerCount = parseInt(document.getElementById('player_count').value);
        const timerSettings = document.getElementById('timer-settings');
        
        if (timerSettings) {
            if (playerCount >= 4) {
                timerSettings.style.display = 'block';
                console.log('Timer settings shown for', playerCount, 'players');
            } else {
                timerSettings.style.display = 'none';
            }
        }
    }
    
    // Function: Reset room name to default
    function resetToEnhancedDefaultName() {
        const gameNameField = document.getElementById('game_name');
        if (gameNameField) {
            gameNameField.value = ''; // Clear it first
            updateEnhancedDefaultGameName(); // Then regenerate
        }
    }
    
    // Function: Show validation errors to user
    function showValidationError(message) {
        console.error('Validation error:', message);
        
        // Remove any existing error messages
        const existingError = document.querySelector('.validation-error');
        if (existingError) {
            existingError.remove();
        }
        
        // Create new error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'validation-error';
        errorDiv.style.cssText = `
            background: rgba(231, 76, 60, 0.2);
            border: 2px solid #e74c3c;
            border-radius: 8px;
            padding: 12px;
            margin: 10px 0;
            color: #fff;
            font-size: 14px;
            text-align: center;
        `;
        errorDiv.textContent = message;
        
        // Insert before submit button
        const form = document.querySelector('form');
        const submitBtn = form.querySelector('button[type="submit"]');
        if (form && submitBtn) {
            form.insertBefore(errorDiv, submitBtn);
        }
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (errorDiv.parentElement) {
                errorDiv.remove();
            }
        }, 5000);
    }
    
    // Function: Main game creation handler
    function createEnhancedGame(event) {
        event.preventDefault(); // Stop normal form submission
        console.log('=== STARTING GAME CREATION ===');
        
        const formData = new FormData(event.target);
        
        // Validate board size + player count combination
        const boardSize = parseInt(formData.get('board_size'));
        const playerCount = parseInt(formData.get('player_count'));
        const gameType = formData.get('game_type');
        
        console.log(`Validating: ${playerCount} players on size ${boardSize} board (${gameType})`);
        
        // Check if combination is valid (skip for AI games)
        if (gameType !== 'vs_ai') {
            const limits = BOARD_PLAYER_LIMITS[boardSize];
            if (limits && playerCount > limits.max) {
                const errorMsg = `${limits.name} board supports maximum ${limits.max} players. Selected: ${playerCount} players.`;
                showValidationError(errorMsg);
                return;
            }
        }
        
        // Prepare data for your existing backend
        const gameData = {
            action: 'create_game',
            game_name: formData.get('room_name') || `${playerCount}-Player Game`,
            player_count: formData.get('player_count'),
            board_size: formData.get('board_size'),
            ai_difficulty: formData.get('ai_difficulty') || 'medium'
        };
        
        // Map new game_type to existing game_mode
        if (formData.get('game_type') === 'vs_ai') {
            gameData.game_mode = 'ai';
        } else {
            gameData.game_mode = 'multiplayer';
        }
        
        console.log('Sending to backend:', gameData);
        
        // Disable submit button during request
        const submitBtn = event.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        submitBtn.disabled = true;
        submitBtn.textContent = 'Creating...';
        
        // Send request to backend
        fetch('', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(gameData)
        })
        .then(response => {
            console.log('Response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Server response:', data);
            
            if (data.success) {
                console.log('SUCCESS! Redirecting to game:', data.game_id);
                window.location.href = `?page=game&id=${data.game_id}`;
            } else {
                console.error('Server error:', data.error);
                showValidationError(data.error || 'Failed to create game');
            }
        })
        .catch(error => {
            console.error('Network error:', error);
            showValidationError('Network error: Could not connect to server');
        })
        .finally(() => {
            // Re-enable submit button
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
        });
    }
    
    // =================================================================
    // SECTION: Event Listeners Setup
    // =================================================================
    // This runs when the page finishes loading and sets up all the
    // interactive behavior for the enhanced room creation form
    // =================================================================
    
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Setting up enhanced room creation system...');
        
        // Set up board size change listener
        const boardSizeSelect = document.getElementById('board_size');
        if (boardSizeSelect) {
            boardSizeSelect.addEventListener('change', function() {
                console.log('Board size changed to:', this.value);
                updatePlayerOptions();
            });
            console.log('✓ Board size listener attached');
        } else {
            console.warn('⚠ Board size select not found');
        }
        
        // Set up player count change listener
        const playerCountSelect = document.getElementById('player_count');
        if (playerCountSelect) {
            playerCountSelect.addEventListener('change', function() {
                console.log('Player count changed to:', this.value);
                updateTimerVisibility();
                updateEnhancedDefaultGameName();
            });
            console.log('✓ Player count listener attached');
        } else {
            console.warn('⚠ Player count select not found');
        }
        
        // Set up game type change listener
        const gameTypeSelect = document.getElementById('game_type');
        if (gameTypeSelect) {
            gameTypeSelect.addEventListener('change', function() {
                console.log('Game type changed to:', this.value);
                updateEnhancedGameModeOptions();
            });
            console.log('✓ Game type listener attached');
        } else {
            console.warn('⚠ Game type select not found');
        }
        
        // Set up AI difficulty change listener
        const aiDifficultySelect = document.getElementById('ai_difficulty');
        if (aiDifficultySelect) {
            aiDifficultySelect.addEventListener('change', function() {
                console.log('AI difficulty changed to:', this.value);
                updateEnhancedDefaultGameName();
            });
            console.log('✓ AI difficulty listener attached');
        }
        
        // Initialize the form state
        updateEnhancedGameModeOptions();
        
        console.log('✓ Enhanced room creation system ready!');
    });
    
    // =================================================================
    // END OF ENHANCED ROOM CREATION SYSTEM
    // =================================================================
    </script>
    <?php endif; ?>
    
    <script src="assets/game.js?v=48"></script>

    <!-- ============================================================ -->
    <!-- YOUR EXISTING JAVASCRIPT CONTINUES HERE                     -->
    <!-- ============================================================ -->
 <script>
  // Initialize page-specific functionality
  <?php if (!$isLoggedIn && $page !== 'demo'): ?>
    showAuth('login');
  <?php elseif ($page === 'lobby'): ?>
    loadAvailableGames();
    // Initialize default game name using the enhanced generator
    if (document.getElementById('game_name')) {
      updateEnhancedDefaultGameName();
    }
  <?php endif; ?>
</script>

</body>
</html>